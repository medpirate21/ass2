---
import Layout from '../layouts/Layout.astro';

const { url } = Astro;
const searchParams = new URLSearchParams(url.search);
const dataId = searchParams.get('id');
const title = searchParams.get('title');
const userid = searchParams.get('userid');

// The data-id comes already base64 encoded from the lecture pages
// We need to decode it to get the original data-id
let decodedId = dataId;
let decodedUserId = userid;
if (dataId) {
  try {
    decodedId = atob(dataId);
  } catch (e) {
    decodedId = dataId; // Use original if decoding fails
  }
}
if (userid) {
  try {
    decodedUserId = atob(userid);
  } catch (e) {
    decodedUserId = userid; // Use original if decoding fails
  }
}

console.log('URL dataId (encoded):', dataId);
console.log('Decoded dataId:', decodedId);
console.log('Decoded userId:', decodedUserId);
---

<Layout title={title || 'Video Player'}>
  <div class="video-page">
    <div class="video-container">
      <div class="video-header">
        <button id="back-btn" class="back-btn">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M19 12H5"/>
            <path d="M12 19l-7-7 7-7"/>
          </svg>
          Back
        </button>
      </div>
      
      <div class="video-content">
        <h1 class="video-title">{title || 'Video Content'}</h1>
        
        <div class="video-actions">
          <button id="watch-download-btn" class="action-btn primary" data-id={decodedId} data-userid={decodedUserId}>
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polygon points="5,3 19,12 5,21"/>
            </svg>
            Watch/Download Video
          </button>
          
          <button id="telegram-btn" class="action-btn secondary" data-id={decodedId} data-userid={decodedUserId}>
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M21 2l-2 20-7-4-4-4z"/>
              <path d="M21 2l-10 10"/>
              <path d="M11 12l-2-2"/>
            </svg>
            Get File on Telegram
          </button>
          
          <div class="instruction-text">
            <p>ðŸ’¡ Link copied to clipboard! If the page doesn't open automatically, paste the link manually in Safari or Chrome.</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  :root {
    --glass-bg: rgba(255, 255, 255, 0.08);
    --glass-border: rgba(255, 255, 255, 0.18);
    --glass-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
    --glass-backdrop: blur(16px);
    --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    --accent-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
  }

  .video-page {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem 1rem;
    background: linear-gradient(135deg, #0099cc 0%, #00d4ff 50%, #667eea 100%);
    background-size: 400% 400%;
    animation: gradientShift 15s ease infinite;
    position: relative;
    overflow: hidden;
  }

  .video-page::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 40% 40%, rgba(120, 219, 255, 0.2) 0%, transparent 50%);
    pointer-events: none;
  }

  @keyframes gradientShift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }

  .video-container {
    background: var(--glass-bg);
    backdrop-filter: var(--glass-backdrop);
    -webkit-backdrop-filter: var(--glass-backdrop);
    border-radius: 24px;
    padding: 2.5rem;
    max-width: 600px;
    width: 100%;
    box-shadow: var(--glass-shadow);
    border: 1px solid var(--glass-border);
    position: relative;
    z-index: 1;
  }

  .video-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%);
    border-radius: 24px;
    pointer-events: none;
  }

  .video-header {
    margin-bottom: 2.5rem;
    position: relative;
    z-index: 2;
  }

  .back-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: var(--glass-bg);
    backdrop-filter: var(--glass-backdrop);
    -webkit-backdrop-filter: var(--glass-backdrop);
    border: 1px solid var(--glass-border);
    color: white;
    padding: 0.875rem 1.25rem;
    border-radius: 16px;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    font-size: 0.9rem;
    font-weight: 500;
  }

  .back-btn:hover {
    background: rgba(255, 255, 255, 0.15);
    transform: translateX(-4px) translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  .video-content {
    text-align: center;
    position: relative;
    z-index: 2;
  }

  .video-title {
    font-size: 2rem;
    font-weight: 700;
    background: linear-gradient(135deg, #ffffff 0%, #f0f0f0 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-bottom: 2.5rem;
    line-height: 1.3;
    letter-spacing: -0.02em;
  }

  .video-actions {
    display: flex;
    flex-direction: column;
    gap: 1.25rem;
  }

  .action-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    padding: 1.25rem 2rem;
    border: none;
    border-radius: 18px;
    font-size: 1.05rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    text-decoration: none;
    position: relative;
    overflow: hidden;
  }

  .action-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.6s;
  }

  .action-btn:hover::before {
    left: 100%;
  }

  .action-btn.primary {
    background: var(--primary-gradient);
    color: white;
    box-shadow: 0 8px 32px rgba(102, 126, 234, 0.4);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .action-btn.primary:hover {
    transform: translateY(-4px);
    box-shadow: 0 12px 40px rgba(102, 126, 234, 0.6);
  }

  .action-btn.secondary {
    background: var(--glass-bg);
    backdrop-filter: var(--glass-backdrop);
    -webkit-backdrop-filter: var(--glass-backdrop);
    color: white;
    border: 1px solid var(--glass-border);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }

  .action-btn.secondary:hover {
    background: rgba(255, 255, 255, 0.15);
    transform: translateY(-4px);
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.2);
  }

  .instruction-text {
    margin-top: 1.5rem;
    padding: 1.25rem;
    background: var(--glass-bg-accent);
    backdrop-filter: var(--glass-backdrop-filter);
    -webkit-backdrop-filter: var(--glass-backdrop-filter);
    border: var(--glass-border);
    border-radius: var(--glass-border-radius);
    box-shadow: var(--glass-shadow);
    text-align: center;
    display: block;
    position: relative;
    opacity: 1;
    visibility: visible;
  }

  .instruction-text::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%);
    border-radius: 16px;
    pointer-events: none;
  }

  .instruction-text.show {
    display: block;
    animation: slideUp 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .instruction-text p {
    color: var(--glass-text);
    font-size: 0.95rem;
    margin: 0;
    font-weight: 500;
    position: relative;
    z-index: 1;
  }

  @keyframes slideUp {
    from { 
      opacity: 0; 
      transform: translateY(20px) scale(0.95); 
    }
    to { 
      opacity: 1; 
      transform: translateY(0) scale(1); 
    }
  }

  @media (max-width: 768px) {
    .video-page {
      padding: 1rem;
    }
    
    .video-container {
      margin: 0;
      padding: 2rem;
    }
    
    .video-title {
      font-size: 1.6rem;
    }
    
    .action-btn {
      padding: 1rem 1.5rem;
      font-size: 1rem;
    }
  }
</style>

<script src="/src/config.js"></script>
<script>
  // TypeScript declaration for APP_CONFIG
  declare global {
    interface Window {
      APP_CONFIG: any;
    }
  }

  // API functions
  async function decrementVideoQuota(userid) {
    console.log('Attempting to decrement quota for user:', userid);
    try {
      const response = await fetch(window.APP_CONFIG.VIDEO_QUOTA_DECREMENT(userid), {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      console.log('API Response status:', response.status);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      console.log('Quota decremented successfully:', data);
      return data;
    } catch (error) {
      console.error('Error decrementing quota:', error);
      console.error('Full error details:', error.message);
      throw error;
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    const backBtn = document.getElementById('back-btn');
    const watchDownloadBtn = document.getElementById('watch-download-btn');
    const telegramBtn = document.getElementById('telegram-btn');

    // Back button functionality
    backBtn?.addEventListener('click', () => {
      window.history.back();
    });

    // Watch/Download button functionality
    watchDownloadBtn?.addEventListener('click', async (e) => {
      e.preventDefault();
      const dataId = watchDownloadBtn.getAttribute('data-id');
      const userId = watchDownloadBtn.getAttribute('data-userid');
      console.log('Watch/Download clicked, dataId:', dataId, 'userId:', userId);
      console.log('Button element:', watchDownloadBtn);
      console.log('All button attributes:', watchDownloadBtn.getAttributeNames());
      
      // Get dataId from URL params if not in button attributes
      let finalDataId = dataId;
      if (!finalDataId) {
        const urlParams = new URLSearchParams(window.location.search);
        const urlDataId = urlParams.get('id');
        if (urlDataId) {
          try {
            finalDataId = atob(urlDataId);
            console.log('Got dataId from URL params:', finalDataId);
          } catch (e) {
            finalDataId = urlDataId;
          }
        }
      }

      // Get userId from URL params if not in button attributes
      let finalUserId = userId;
      if (!finalUserId) {
        const urlParams = new URLSearchParams(window.location.search);
        const urlUserId = urlParams.get('userid');
        if (urlUserId) {
          try {
            finalUserId = atob(urlUserId);
            console.log('Got userId from URL params:', finalUserId);
          } catch (e) {
            finalUserId = urlUserId;
          }
        }
      }
      
      if (finalDataId && finalUserId) {
        try {
          console.log('Calling decrementVideoQuota with userId:', finalUserId);
          // Decrement quota first
          await decrementVideoQuota(finalUserId);
          
          // Then open video URL with medapi.pages.dev format
          const encodedId = btoa(finalDataId!);
          const videoUrl = window.APP_CONFIG.VIDEO_PLAYER_URL(encodedId);
          console.log('Opening video URL:', videoUrl);
          
          // Copy to clipboard
          try {
            await navigator.clipboard.writeText(videoUrl);
            document.querySelector('.instruction-text')?.classList.add('show');
            setTimeout(() => {
              document.querySelector('.instruction-text')?.classList.remove('show');
            }, 5000);
          } catch (err) {
            console.error('Failed to copy to clipboard:', err);
          }
          
          window.open(videoUrl, '_blank');
        } catch (error) {
          console.error('Error processing watch/download:', error);
          // Still allow access on error with fallback data
          if (finalDataId) {
            const encodedId = btoa(finalDataId);
            const videoUrl = window.APP_CONFIG.VIDEO_PLAYER_URL(encodedId);
            
            // Copy to clipboard even on error
            try {
              await navigator.clipboard.writeText(videoUrl);
              document.querySelector('.instruction-text')?.classList.add('show');
              setTimeout(() => {
                document.querySelector('.instruction-text')?.classList.remove('show');
              }, 5000);
            } catch (err) {
              console.error('Failed to copy to clipboard:', err);
            }
            
            window.open(videoUrl, '_blank');
          }
        }
      } else {
        console.error('Missing data-id or userid. finalDataId:', finalDataId, 'finalUserId:', finalUserId);
      }
    });

    // Telegram button functionality
    telegramBtn?.addEventListener('click', async (e) => {
      e.preventDefault();
      const dataId = telegramBtn.getAttribute('data-id');
      const userId = telegramBtn.getAttribute('data-userid');
      console.log('Telegram clicked, dataId:', dataId, 'userId:', userId);
      console.log('Telegram button element:', telegramBtn);
      console.log('All telegram button attributes:', telegramBtn.getAttributeNames());
      
      // Get userId from URL params if not in button attributes
      let finalUserId = userId;
      if (!finalUserId) {
        const urlParams = new URLSearchParams(window.location.search);
        const urlUserId = urlParams.get('userid');
        if (urlUserId) {
          try {
            finalUserId = atob(urlUserId);
            console.log('Got userId from URL params for telegram:', finalUserId);
          } catch (e) {
            finalUserId = urlUserId;
          }
        }
      }
      
      if (finalUserId) {
        try {
          console.log('Calling decrementVideoQuota for telegram with userId:', finalUserId);
          // Decrement quota first
          await decrementVideoQuota(finalUserId);
          
          // Then open Telegram
          const telegramUrl = window.APP_CONFIG.TELEGRAM_URL;
          console.log('Opening Telegram:', telegramUrl);
          window.open(telegramUrl, '_blank');
        } catch (error) {
          console.error('Error processing telegram access:', error);
        }
      } else {
        console.error('Missing userid for telegram button. finalUserId:', finalUserId);
        // Fallback without quota decrement
        const telegramUrl = window.APP_CONFIG.TELEGRAM_URL;
        window.open(telegramUrl, '_blank');
      }
    });
  });
</script>
