---
import Layout from '../layouts/Layout.astro';

const { url } = Astro;
const searchParams = new URLSearchParams(url.search);
const dataId = searchParams.get('id');
const title = searchParams.get('title');
const userid = searchParams.get('userid');

// The data-id comes already base64 encoded from the lecture pages
// We need to decode it to get the original data-id
let decodedId = dataId;
let decodedUserId = userid;
if (dataId) {
  try {
    decodedId = atob(dataId);
  } catch (e) {
    decodedId = dataId; // Use original if decoding fails
  }
}
if (userid) {
  try {
    decodedUserId = atob(userid);
  } catch (e) {
    decodedUserId = userid; // Use original if decoding fails
  }
}

console.log('URL dataId (encoded):', dataId);
console.log('Decoded dataId:', decodedId);
console.log('Decoded userId:', decodedUserId);
---

<Layout title={title || 'Video Player'}>
  <div class="video-page">
    <div class="video-container">
      <div class="video-header">
        <button id="back-btn" class="back-btn">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M19 12H5"/>
            <path d="M12 19l-7-7 7-7"/>
          </svg>
          Back
        </button>
      </div>
      
      <div class="video-content">
        <h1 class="video-title">{title || 'Video Content'}</h1>
        
        <div class="video-actions">
          <div class="watch-link-container">
            <label class="link-label">Watch Link:</label>
            <div class="link-display">
              <input type="text" id="watch-link-text" class="link-input" readonly>
              <button id="copy-link-btn" class="copy-btn" title="Copy Link">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                  <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2 2v1"></path>
                </svg>
              </button>
            </div>
          </div>
          
          <div class="instruction-text">
            <p>ðŸ’¡ Link copied to clipboard! If the page doesn't open automatically, paste the link manually in Safari or Chrome.</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  :root {
    --glass-bg: rgba(255, 255, 255, 0.08);
    --glass-border: rgba(255, 255, 255, 0.18);
    --glass-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
    --glass-backdrop: blur(16px);
    --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    --accent-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
  }

  .video-page {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem 1rem;
    background: linear-gradient(135deg, #0099cc 0%, #00d4ff 50%, #667eea 100%);
    background-size: 400% 400%;
    animation: gradientShift 15s ease infinite;
    position: relative;
    overflow: hidden;
  }

  .video-page::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 40% 40%, rgba(120, 219, 255, 0.2) 0%, transparent 50%);
    pointer-events: none;
  }

  @keyframes gradientShift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }

  .video-container {
    background: var(--glass-bg);
    backdrop-filter: var(--glass-backdrop-filter);
    -webkit-backdrop-filter: var(--glass-backdrop-filter);
    border-radius: var(--glass-border-radius);
    padding: 2.5rem;
    max-width: 600px;
    width: 100%;
    box-shadow: var(--glass-shadow);
    border: var(--glass-border);
    position: relative;
    z-index: 1;
  }


  .video-header {
    margin-bottom: 2.5rem;
    position: relative;
    z-index: 2;
  }

  .back-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: var(--glass-bg-secondary);
    backdrop-filter: var(--glass-backdrop-filter);
    -webkit-backdrop-filter: var(--glass-backdrop-filter);
    border: var(--glass-border);
    color: var(--glass-text);
    padding: 0.875rem 1.25rem;
    border-radius: var(--glass-border-radius);
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    font-size: 0.9rem;
    font-weight: 500;
  }

  .back-btn:hover {
    background: var(--glass-bg-hover);
    transform: translateX(-4px) translateY(-2px);
    box-shadow: var(--glass-shadow-hover);
  }

  .video-content {
    text-align: center;
    position: relative;
    z-index: 2;
  }

  .video-title {
    font-size: 2rem;
    font-weight: 700;
    background: linear-gradient(135deg, #ffffff 0%, #f0f0f0 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-bottom: 2.5rem;
    line-height: 1.3;
    letter-spacing: -0.02em;
  }

  .video-actions {
    display: flex;
    flex-direction: column;
    gap: 1.25rem;
  }

  .action-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    padding: 1.25rem 2rem;
    border: none;
    border-radius: 18px;
    font-size: 1.05rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    text-decoration: none;
    position: relative;
    overflow: hidden;
  }

  .action-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.6s;
  }

  .action-btn:hover::before {
    left: 100%;
  }

  .action-btn.primary {
    background: var(--primary-gradient);
    color: white;
    box-shadow: 0 8px 32px rgba(102, 126, 234, 0.4);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .action-btn.primary:hover {
    transform: translateY(-4px);
    box-shadow: 0 12px 40px rgba(102, 126, 234, 0.6);
  }

  .action-btn.secondary {
    background: var(--glass-bg);
    backdrop-filter: var(--glass-backdrop);
    -webkit-backdrop-filter: var(--glass-backdrop);
    color: white;
    border: 1px solid var(--glass-border);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }

  .action-btn.secondary:hover {
    background: rgba(255, 255, 255, 0.15);
    transform: translateY(-4px);
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.2);
  }

  .instruction-text {
    margin-top: 1.5rem;
    padding: 1.25rem;
    background: var(--glass-bg-accent);
    backdrop-filter: var(--glass-backdrop-filter);
    -webkit-backdrop-filter: var(--glass-backdrop-filter);
    border: var(--glass-border);
    border-radius: var(--glass-border-radius);
    box-shadow: var(--glass-shadow);
    text-align: center;
    display: block;
    position: relative;
    opacity: 1;
    visibility: visible;
  }

  .instruction-text::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%);
    border-radius: 16px;
    pointer-events: none;
  }

  .instruction-text.show {
    display: block;
    animation: slideUp 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .instruction-text p {
    color: var(--glass-text);
    font-size: 0.95rem;
    margin: 0;
    font-weight: 500;
    position: relative;
    z-index: 1;
  }

  @keyframes slideUp {
    from { 
      opacity: 0; 
      transform: translateY(20px) scale(0.95); 
    }
    to { 
      opacity: 1; 
      transform: translateY(0) scale(1); 
    }
  }

  .watch-link-container {
    margin-top: 1rem;
    margin-bottom: 1rem;
    padding: 1.25rem;
    background: var(--glass-bg-secondary);
    backdrop-filter: var(--glass-backdrop-filter);
    -webkit-backdrop-filter: var(--glass-backdrop-filter);
    border: var(--glass-border);
    border-radius: var(--glass-border-radius);
    box-shadow: var(--glass-shadow);
  }

  .link-label {
    display: block;
    font-size: 0.9rem;
    font-weight: 600;
    color: var(--glass-text);
    margin-bottom: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .link-display {
    display: flex;
    gap: 0.75rem;
    align-items: center;
  }

  .link-input {
    flex: 1;
    padding: 0.875rem 1rem;
    background: var(--glass-bg-tertiary);
    border: var(--glass-border-light);
    border-radius: 8px;
    color: var(--glass-text);
    font-size: 0.9rem;
    font-family: 'JetBrains Mono', monospace;
    outline: none;
    transition: all 0.3s ease;
  }

  .link-input:focus {
    border-color: var(--glass-accent);
    box-shadow: 0 0 0 2px rgba(0, 153, 204, 0.2);
  }

  .link-input::placeholder {
    color: var(--glass-text-muted);
    font-style: italic;
  }

  .copy-btn {
    padding: 0.875rem;
    background: var(--glass-bg-tertiary);
    border: var(--glass-border-light);
    border-radius: 8px;
    color: var(--glass-accent);
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 44px;
  }

  .copy-btn:hover {
    background: var(--glass-bg-hover);
    border-color: var(--glass-accent);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 153, 204, 0.3);
  }

  .copy-btn:active {
    transform: translateY(0);
  }

  .copy-btn svg {
    transition: transform 0.2s ease;
  }

  .copy-btn:hover svg {
    transform: scale(1.1);
  }

  @media (max-width: 768px) {
    .video-page {
      padding: 1rem;
    }
    
    .video-container {
      margin: 0;
      padding: 2rem;
    }
    
    .video-title {
      font-size: 1.6rem;
    }
    
    .action-btn {
      padding: 1rem 1.5rem;
      font-size: 1rem;
    }

    .link-display {
      flex-direction: column;
      gap: 0.5rem;
    }

    .copy-btn {
      width: 100%;
      justify-content: center;
    }
  }
</style>

<script src="/src/config.js"></script>
<script>
  // TypeScript declaration for APP_CONFIG
  declare global {
    interface Window {
      APP_CONFIG: any;
    }
  }

  // API functions
  async function decrementVideoQuota(userid) {
    console.log('Attempting to decrement quota for user:', userid);
    try {
      const response = await fetch(window.APP_CONFIG.VIDEO_QUOTA_DECREMENT(userid), {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      console.log('API Response status:', response.status);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      console.log('Quota decremented successfully:', data);
      return data;
    } catch (error) {
      console.error('Error decrementing quota:', error);
      console.error('Full error details:', error.message);
      throw error;
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    const backBtn = document.getElementById('back-btn');
    const copyLinkBtn = document.getElementById('copy-link-btn');
    const watchLinkInput = document.getElementById('watch-link-text') as HTMLInputElement;

    // Generate and display watch link on page load
    const urlParams = new URLSearchParams(window.location.search);
    const urlDataId = urlParams.get('id');
    if (urlDataId && watchLinkInput) {
      try {
        const decodedId = atob(urlDataId);
        const encodedId = btoa(decodedId);
        const videoUrl = window.APP_CONFIG.VIDEO_PLAYER_URL(encodedId);
        watchLinkInput.value = videoUrl;
      } catch (e) {
        const videoUrl = window.APP_CONFIG.VIDEO_PLAYER_URL(urlDataId);
        watchLinkInput.value = videoUrl;
      }
    }

    // Back button functionality
    backBtn?.addEventListener('click', () => {
      window.history.back();
    });

    // Copy link button functionality
    copyLinkBtn?.addEventListener('click', async () => {
      if (watchLinkInput && watchLinkInput.value) {
        try {
          await navigator.clipboard.writeText(watchLinkInput.value);
          
          // Visual feedback
          const originalText = copyLinkBtn.innerHTML;
          copyLinkBtn.innerHTML = `
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="20,6 9,17 4,12"></polyline>
            </svg>
          `;
          copyLinkBtn.style.color = '#10b981';
          
          setTimeout(() => {
            copyLinkBtn.innerHTML = originalText;
            copyLinkBtn.style.color = '';
          }, 2000);
          
          // Show instruction text
          document.querySelector('.instruction-text')?.classList.add('show');
          setTimeout(() => {
            document.querySelector('.instruction-text')?.classList.remove('show');
          }, 3000);
        } catch (err) {
          console.error('Failed to copy link:', err);
        }
      }
    });
  });
</script>
