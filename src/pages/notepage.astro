---
import Layout from '../layouts/Layout.astro';

const { url } = Astro;
const searchParams = new URLSearchParams(url.search);
const dataId = searchParams.get('id');
const title = searchParams.get('title');
const userid = searchParams.get('userid');

// The data-nid comes already base64 encoded from the lecture pages
// We need to decode it to get the original data-nid
let decodedId = dataId;
let decodedUserId = userid;
if (dataId) {
  try {
    decodedId = atob(dataId);
  } catch (e) {
    decodedId = dataId; // Use original if decoding fails
  }
}
if (userid) {
  try {
    decodedUserId = atob(userid);
  } catch (e) {
    decodedUserId = userid; // Use original if decoding fails
  }
}

console.log('URL dataId (encoded):', dataId);
console.log('Decoded dataId:', decodedId);
console.log('Decoded userId:', decodedUserId);
---

<Layout title={title || 'Note Viewer'}>
  <div class="note-page">
    <div class="note-container">
      <div class="note-header">
        <button id="back-btn" class="back-btn">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M19 12H5"/>
            <path d="M12 19l-7-7 7-7"/>
          </svg>
          Back
        </button>
      </div>
      
      <div class="note-content">
        <h1 class="note-title">{title || 'Note Content'}</h1>
        
        <div class="note-actions">
          <button id="view-download-btn" class="action-btn primary" data-nid={decodedId} data-userid={decodedUserId}>
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
              <polyline points="14,2 14,8 20,8"/>
              <line x1="16" y1="13" x2="8" y2="13"/>
              <line x1="16" y1="17" x2="8" y2="17"/>
              <polyline points="10,9 9,9 8,9"/>
            </svg>
            View/Download Notes
          </button>
          
          <button id="telegram-btn" class="action-btn secondary" data-nid={decodedId} data-userid={decodedUserId}>
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M21 2l-2 20-7-4-4-4z"/>
              <path d="M21 2l-10 10"/>
              <path d="M11 12l-2-2"/>
            </svg>
            Get File on Telegram
          </button>
        </div>
        
        <div class="instruction-text">
          <p>ðŸ’¡ Link copied to clipboard! If the page doesn't open automatically, paste the link manually in Safari or Chrome.</p>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  .note-page {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem 1rem;
  }

  .note-container {
    background: var(--card-bg);
    border-radius: 20px;
    padding: 2rem;
    max-width: 600px;
    width: 100%;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .note-header {
    margin-bottom: 2rem;
  }

  .back-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: var(--text-color);
    padding: 0.75rem 1rem;
    border-radius: 10px;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.9rem;
  }

  .back-btn:hover {
    background: rgba(255, 255, 255, 0.15);
    transform: translateX(-2px);
  }

  .note-content {
    text-align: center;
  }

  .note-title {
    font-size: 1.8rem;
    font-weight: 600;
    color: var(--text-color);
    margin-bottom: 2rem;
    line-height: 1.4;
  }

  .note-actions {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .action-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    padding: 1rem 1.5rem;
    border: none;
    border-radius: 12px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
  }

  .action-btn.primary {
    background: linear-gradient(135deg, var(--purple-primary), var(--purple-secondary));
    color: white;
    box-shadow: 0 4px 15px rgba(79, 59, 196, 0.3);
  }

  .action-btn.primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(79, 59, 196, 0.4);
  }

  .action-btn.secondary {
    background: rgba(255, 255, 255, 0.1);
    color: var(--text-color);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .action-btn.secondary:hover {
    background: rgba(255, 255, 255, 0.15);
    transform: translateY(-2px);
  }

  .instruction-text {
    margin-top: 1.5rem;
    padding: 1rem;
    background: rgba(255, 193, 7, 0.1);
    border: 1px solid rgba(255, 193, 7, 0.3);
    border-radius: 10px;
    text-align: center;
    display: none;
  }

  .instruction-text.show {
    display: block;
    animation: fadeIn 0.3s ease;
  }

  .instruction-text p {
    color: #ffc107;
    font-size: 0.9rem;
    margin: 0;
    font-weight: 500;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  @media (max-width: 768px) {
    .note-container {
      margin: 1rem;
      padding: 1.5rem;
    }
    
    .note-title {
      font-size: 1.4rem;
    }
  }
</style>

<script src="/src/config.js"></script>
<script>
  // TypeScript declaration for APP_CONFIG
  declare global {
    interface Window {
      APP_CONFIG: any;
    }
  }

  // API functions
  async function decrementNoteQuota(userid) {
    console.log('Attempting to decrement note quota for user:', userid);
    try {
      const response = await fetch(window.APP_CONFIG.NOTE_QUOTA_DECREMENT(userid), {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      console.log('API Response status:', response.status);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      console.log('Note quota decremented successfully:', data);
      return data;
    } catch (error) {
      console.error('Error decrementing note quota:', error);
      console.error('Full error details:', error.message);
      throw error;
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    const backBtn = document.getElementById('back-btn');
    const viewDownloadBtn = document.getElementById('view-download-btn');
    const telegramBtn = document.getElementById('telegram-btn');

    // Back button functionality
    backBtn?.addEventListener('click', () => {
      window.history.back();
    });

    // View/Download button functionality
    viewDownloadBtn?.addEventListener('click', async (e) => {
      e.preventDefault();
      const dataNid = viewDownloadBtn.getAttribute('data-nid');
      const userId = viewDownloadBtn.getAttribute('data-userid');
      console.log('View/Download clicked, dataNid:', dataNid, 'userId:', userId);
      console.log('Button element:', viewDownloadBtn);
      console.log('All button attributes:', viewDownloadBtn.getAttributeNames());
      
      // Get dataNid from URL params if not in button attributes
      let finalDataNid = dataNid;
      if (!finalDataNid) {
        const urlParams = new URLSearchParams(window.location.search);
        const urlDataId = urlParams.get('id');
        if (urlDataId) {
          try {
            finalDataNid = atob(urlDataId);
            console.log('Got dataNid from URL params:', finalDataNid);
          } catch (e) {
            finalDataNid = urlDataId;
          }
        }
      }

      // Get userId from URL params if not in button attributes
      let finalUserId = userId;
      if (!finalUserId) {
        const urlParams = new URLSearchParams(window.location.search);
        const urlUserId = urlParams.get('userid');
        if (urlUserId) {
          try {
            finalUserId = atob(urlUserId);
            console.log('Got userId from URL params:', finalUserId);
          } catch (e) {
            finalUserId = urlUserId;
          }
        }
      }
      
      if (finalDataNid && finalUserId) {
        try {
          console.log('Calling decrementNoteQuota with userId:', finalUserId);
          // Decrement quota first
          await decrementNoteQuota(finalUserId);
          
          // Then open note URL with medapi.pages.dev format
          const encodedId = btoa(finalDataNid!);
          const noteUrl = window.APP_CONFIG.NOTE_VIEWER_URL(encodedId);
          console.log('Opening note URL:', noteUrl);
          
          // Copy to clipboard
          try {
            await navigator.clipboard.writeText(noteUrl);
            document.querySelector('.instruction-text')?.classList.add('show');
            setTimeout(() => {
              document.querySelector('.instruction-text')?.classList.remove('show');
            }, 5000);
          } catch (err) {
            console.error('Failed to copy to clipboard:', err);
          }
          
          window.open(noteUrl, '_blank');
        } catch (error) {
          console.error('Error processing view/download:', error);
          // Still allow access on error with fallback data
          if (finalDataNid) {
            const encodedId = btoa(finalDataNid);
            const noteUrl = window.APP_CONFIG.NOTE_VIEWER_URL(encodedId);
            
            // Copy to clipboard even on error
            try {
              await navigator.clipboard.writeText(noteUrl);
              document.querySelector('.instruction-text')?.classList.add('show');
              setTimeout(() => {
                document.querySelector('.instruction-text')?.classList.remove('show');
              }, 5000);
            } catch (err) {
              console.error('Failed to copy to clipboard:', err);
            }
            
            window.open(noteUrl, '_blank');
          }
        }
      } else {
        console.error('Missing data-nid or userid. finalDataNid:', finalDataNid, 'finalUserId:', finalUserId);
      }
    });

    // Telegram button functionality
    telegramBtn?.addEventListener('click', async (e) => {
      e.preventDefault();
      const dataNid = telegramBtn.getAttribute('data-nid');
      const userId = telegramBtn.getAttribute('data-userid');
      console.log('Telegram clicked, dataNid:', dataNid, 'userId:', userId);
      console.log('Telegram button element:', telegramBtn);
      console.log('All telegram button attributes:', telegramBtn.getAttributeNames());
      
      // Get userId from URL params if not in button attributes
      let finalUserId = userId;
      if (!finalUserId) {
        const urlParams = new URLSearchParams(window.location.search);
        const urlUserId = urlParams.get('userid');
        if (urlUserId) {
          try {
            finalUserId = atob(urlUserId);
            console.log('Got userId from URL params for telegram:', finalUserId);
          } catch (e) {
            finalUserId = urlUserId;
          }
        }
      }
      
      if (finalUserId) {
        try {
          console.log('Calling decrementNoteQuota for telegram with userId:', finalUserId);
          // Decrement quota first
          await decrementNoteQuota(finalUserId);
          
          // Then open Telegram
          const telegramUrl = window.APP_CONFIG.TELEGRAM_URL;
          console.log('Opening Telegram:', telegramUrl);
          window.open(telegramUrl, '_blank');
        } catch (error) {
          console.error('Error processing telegram access:', error);
          // Still allow access on error
          const telegramUrl = window.APP_CONFIG.TELEGRAM_URL;
          window.open(telegramUrl, '_blank');
        }
      } else {
        console.error('Missing userid for telegram button. finalUserId:', finalUserId);
        // Fallback without quota decrement
        const telegramUrl = window.APP_CONFIG.TELEGRAM_URL;
        window.open(telegramUrl, '_blank');
      }
    });
  });
</script>
