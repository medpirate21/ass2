---
import Layout from '../layouts/Layout.astro';

const lectures = [
  {
    id: 1,
    title: "Prepladder",
    type: "dropdown",
    versions: [
      { title: "Version X English", link: "/res/marr" },
      { title: "Version X Hinglish", link: "/res/marr" },
      { title: "Version 6", link: "/res/marr2" },
      { title: "Version 5", link: "/res/marr2" },
      { title: "Version 3 & 4", link: "/res/marr2" },
      { title: "LRR", link: "/res/marr2" },
    ]
  },
  {
    id: 2,
    title: "Prepladder",
    type: "dropdown",
    versions: [
      { title: "Version X English", link: "/res/marr" },
      { title: "Version X Hinglish", link: "/res/marr" },
      { title: "Version 6", link: "/res/marr2" },
      { title: "Version 5", link: "/res/marr2" },
      { title: "Version 3 & 4", link: "/res/marr2" },
      { title: "LRR", link: "/res/marr2" },
    ]
  },
  {
    id: 2,
    title: "Marrow",
    type: "single",
    link: "/res/marr2"
  },
  {
    id: 3,
    title: "Cerebellum", 
    type: "single",
    link: "/lectures/cardiology"
  },
  {
    id: 4,
    title: "Neurology",
    type: "single",
    link: "/lectures/neurology"
  },
  {
    id: 5,
    title: "Orthopedics",
    type: "single",
    link: "/lectures/orthopedics"
  },
  {
    id: 6,
    title: "Psychiatry",
    type: "single",
    link: "/lectures/psychiatry"
  },
  {
    id: 7,
    title: "Dermatology",
    type: "single",
    link: "/lectures/dermatology"
  }
];

---

<Layout title="Lectures - MedAcad">
  <div class="lectures-container">
    <div class="page-header">
      <h1>Medical Lectures</h1>
      <p>Access comprehensive medical education resources</p>
    </div>
    
    <div class="lectures-grid">
      {lectures.map((lecture) => (
        lecture.type === 'dropdown' ? (
          <div class="section-wrapper">
            <button class="section-button" data-section={`lecture-${lecture.id}`}>
              <span class="text">{lecture.title}</span>
              <svg class="chevron" width="20" height="20" viewBox="0 0 24 24">
                <path d="M6 9l6 6 6-6" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
              </svg>
            </button>
            <div class="section-content" id={`lecture-${lecture.id}`}>
              <div class="button-list">
                {lecture.versions?.map((version) => (
                  <a href={version.link} class="btn">{version.title}</a>
                ))}
              </div>
            </div>
          </div>
        ) : (
          <a href={lecture.link} class="lecturenbtn">
            <h3 class="btn-title">{lecture.title}</h3>
          </a>
        )
      ))}
    </div>
  </div>
</Layout>

<style>
  .lectures-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .page-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .page-header h1 {
    font-size: 2.5rem;
    font-weight: 700;
    color: var(--text-color);
    margin-bottom: 0.5rem;
  }

  .page-header p {
    font-size: 1.1rem;
    color: var(--text-color);
    opacity: 0.7;
  }

  .lectures-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1rem;
    max-width: 800px;
    margin: 0 auto;
  }

  .lecturenbtn {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    padding: 1.25rem 1.5rem;
    background: var(--card-bg);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    text-decoration: none;
    color: var(--text-color);
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .lecturenbtn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(var(--purple-primary), 0.1),
      transparent
    );
    transition: left 0.5s ease;
  }

  .btn-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0;
    color: var(--text-color);
    text-align: left;
  }

  .lecturenbtn:hover {
    transform: translateY(-2px);
    border-color: var(--purple-primary);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  .lecturenbtn:hover::before {
    left: 100%;
  }

  .lecturenbtn:hover .btn-title {
    color: var(--purple-primary);
  }

  .lecturenbtn:active {
    transform: translateY(0);
  }

  /* Dropdown styles */
  .section-wrapper {
    margin: 1rem 0;
  }

  .section-button {
    position: relative;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.25rem 1.5rem;
    background: var(--card-bg);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    color: var(--text-color);
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 1.25rem;
    font-weight: 600;
  }

  .section-button:hover {
    transform: translateY(-2px);
    border-color: var(--purple-primary);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  .section-wrapper.active .section-button {
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }

  .section-button .text {
    font-size: 1.25rem;
    font-weight: 600;
  }

  .chevron {
    transition: transform 0.3s ease;
    color: var(--purple-primary);
  }

  .section-wrapper.active .chevron {
    transform: rotate(180deg);
  }

  .section-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease;
    background: var(--card-bg);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-top: none;
    border-bottom-left-radius: 12px;
    border-bottom-right-radius: 12px;
  }

  .section-wrapper.active .section-content {
    max-height: 500px;
  }

  .button-list {
    padding: 1rem;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .btn {
    display: block;
    padding: 1.25rem 1.5rem;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    color: var(--text-color);
    text-decoration: none;
    transition: all 0.2s ease;
    font-size: 0.95rem;
  }

  .btn:hover {
    background: rgba(var(--purple-primary), 0.1);
    border-color: var(--purple-primary);
    transform: translateX(4px);
  }

  @media (max-width: 768px) {
    .lectures-container {
      padding: 1rem;
    }

    .page-header h1 {
      font-size: 2rem;
    }

    .page-header p {
      font-size: 1rem;
    }

    .lecturenbtn {
      padding: 1rem 1.25rem;
    }

    .btn-title {
      font-size: 1.1rem;
    }

  }

  @media (max-width: 480px) {
    .lecturenbtn {
      padding: 0.875rem 1rem;
    }

    .btn-title {
      font-size: 1rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, setting up dropdowns');
    setupDropdowns();
  });

  document.addEventListener('astro:page-load', function() {
    console.log('Astro page loaded, setting up dropdowns');
    setTimeout(setupDropdowns, 100);
  });

  function setupDropdowns() {
    console.log('Setting up dropdowns...');
    const sectionButtons = document.querySelectorAll('.section-button');
    console.log('Found section buttons:', sectionButtons.length);
    
    sectionButtons.forEach((button, index) => {
      console.log(`Setting up button ${index}:`, button);
      
      // Remove any existing listeners
      button.replaceWith(button.cloneNode(true));
      const newButton = document.querySelectorAll('.section-button')[index];
      
      newButton.addEventListener('click', function(e) {
        console.log('Button clicked:', this);
        e.preventDefault();
        
        const wrapper = this.closest('.section-wrapper');
        const wasActive = wrapper?.classList.contains('active');
        console.log('Wrapper active state:', wasActive);

        // Close all dropdowns
        document.querySelectorAll('.section-wrapper').forEach(w => {
          w.classList.remove('active');
        });

        // Open this dropdown if it wasn't active
        if (!wasActive && wrapper) {
          wrapper.classList.add('active');
          console.log('Activated wrapper');
        }
      });
    });
  }

  // Also try immediate setup
  if (document.readyState === 'complete') {
    setupDropdowns();
  }
</script>
