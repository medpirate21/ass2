---
// LoginModal.astro - Modal login popup component
---

<div id="login-modal" class="login-modal hidden">
  <div class="modal-backdrop"></div>
  <div class="modal-content">
    <div class="modal-header">
      <h2>Welcome to Medoracle Academia</h2>
      <p id="modal-subtitle">Checking your account...</p>
    </div>
    
    <!-- Loading State -->
    <div class="modal-form" id="modal-loading">
      <div class="loading-content">
        <div class="spinner"></div>
        <p>Verifying your Telegram account...</p>
      </div>
    </div>

    <!-- Registration Form (shown only if user not found) -->
    <form class="modal-form hidden" id="modal-register-form">
      <div class="form-group">
        <label for="register-userid">User ID</label>
        <input 
          type="text" 
          id="register-userid" 
          name="userid" 
          placeholder="Your Telegram User ID" 
          readonly
        />
      </div>
      
      <div class="form-group">
        <label for="register-username">Username</label>
        <input 
          type="text" 
          id="register-username" 
          name="username" 
          placeholder="Choose a username" 
          required 
        />
      </div>
      
      <button type="submit" class="modal-login-btn" id="modal-register-btn">
        <span class="btn-text">Create Account</span>
        <span class="btn-loading hidden">Creating account...</span>
      </button>
      
      <div id="modal-register-error" class="error-message hidden"></div>
    </form>
    
    <div class="modal-footer">
      <div id="register-footer">
        <p class="mandatory-notice">⚠️ Account creation required to access this site</p>
      </div>
    </div>
  </div>
</div>

<style>
  .login-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1rem;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .login-modal.show {
    opacity: 1;
    visibility: visible;
  }

  .modal-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
  }

  .modal-content {
    position: relative;
    background: var(--card-bg);
    backdrop-filter: blur(30px);
    -webkit-backdrop-filter: blur(30px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 24px;
    width: 100%;
    max-width: 450px;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
    transform: scale(0.9) translateY(20px);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .login-modal.show .modal-content {
    transform: scale(1) translateY(0);
  }

  .modal-header {
    padding: 2rem 2rem 1rem;
    text-align: center;
    position: relative;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }

  .modal-header h2 {
    font-size: 1.75rem;
    font-weight: 700;
    margin: 0 0 0.5rem 0;
    background: linear-gradient(135deg, #ffffff, #e0e0e0);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .modal-header p {
    color: rgba(255, 255, 255, 0.8);
    margin: 0;
    font-size: 1rem;
  }

  .modal-close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: var(--text-color);
    width: 36px;
    height: 36px;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .modal-close:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: scale(1.05);
  }

  .modal-close svg {
    width: 18px;
    height: 18px;
  }

  .modal-form {
    padding: 2rem;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-group label {
    font-weight: 600;
    color: var(--text-color);
    font-size: 0.95rem;
  }

  .form-group input {
    padding: 0.875rem 1rem;
    border: 2px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    background: rgba(255, 255, 255, 0.05);
    color: var(--text-color);
    font-size: 1rem;
    transition: all 0.3s ease;
  }

  .form-group input:focus {
    outline: none;
    border-color: var(--purple-primary);
    background: rgba(255, 255, 255, 0.1);
    box-shadow: 0 0 0 3px rgba(79, 59, 196, 0.1);
  }

  .form-group input::placeholder {
    color: rgba(255, 255, 255, 0.5);
  }

  .modal-login-btn {
    background: linear-gradient(135deg, var(--purple-primary), var(--purple-secondary));
    color: white;
    border: none;
    padding: 1rem 2rem;
    border-radius: 12px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .modal-login-btn:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(79, 59, 196, 0.3);
  }

  .modal-login-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }

  .btn-loading {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  .loading-content {
    text-align: center;
    padding: 2rem;
  }

  .loading-content .spinner {
    width: 40px;
    height: 40px;
    border: 4px solid #f3f3f3;
    border-top: 4px solid #4f3bc4;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 1rem;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .error-message {
    background: rgba(231, 76, 60, 0.1);
    border: 1px solid rgba(231, 76, 60, 0.3);
    color: #ff6b6b;
    padding: 0.875rem;
    border-radius: 8px;
    font-size: 0.9rem;
    text-align: center;
  }

  .hidden {
    display: none;
  }

  .modal-footer {
    padding: 1rem 2rem 2rem;
    text-align: center;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
  }

  .modal-footer p {
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.9rem;
    margin: 0;
  }

  .modal-footer a {
    color: var(--purple-primary);
    text-decoration: none;
    font-weight: 500;
  }

  .modal-footer a:hover {
    text-decoration: underline;
  }

  .mandatory-notice {
    color: #ff6b6b !important;
    font-weight: 600;
    font-size: 0.85rem;
    margin: 0.5rem 0 0 0;
    text-align: center;
  }

  .link-btn {
    background: none;
    border: none;
    color: var(--purple-primary);
    text-decoration: none;
    font-weight: 500;
    cursor: pointer;
    padding: 0;
    font-size: inherit;
  }

  .link-btn:hover {
    text-decoration: underline;
  }

  @media (max-width: 480px) {
    .modal-content {
      margin: 1rem;
      max-width: calc(100% - 2rem);
    }

    .modal-header {
      padding: 1.5rem 1.5rem 1rem;
    }

    .modal-header h2 {
      font-size: 1.5rem;
    }

    .modal-form {
      padding: 1.5rem;
    }

    .modal-footer {
      padding: 1rem 1.5rem 1.5rem;
    }
  }

  /* Prevent body scroll when modal is open */
  body.modal-open {
    overflow: hidden;
  }
</style>

<script>
  interface UserData {
    id: string;
    username: string;
    plan: string;
    status: string;
  }

  document.addEventListener('astro:page-load', () => {
    const modal = document.getElementById('login-modal');
    const registerForm = document.getElementById('modal-register-form') as HTMLFormElement;
    const registerBtn = document.getElementById('modal-register-btn') as HTMLButtonElement;
    const registerUseridInput = document.getElementById('register-userid') as HTMLInputElement;
    const registerUsernameInput = document.getElementById('register-username') as HTMLInputElement;
    const registerErrorMessage = document.getElementById('modal-register-error') as HTMLElement;

    function showModal() {
      modal?.classList.remove('hidden');
      modal?.classList.add('show');
      document.body.classList.add('modal-open');
    }

    function hideModal() {
      modal?.classList.add('hidden');
      document.body.classList.remove('modal-open');
    }

    function showRegisterForm() {
      const loadingDiv = document.getElementById('modal-loading');
      if (loadingDiv) loadingDiv.classList.add('hidden');

      registerForm?.classList.remove('hidden');

      const subtitle = document.getElementById('modal-subtitle');
      if (subtitle) subtitle.textContent = 'Create your account to get started';

      const telegramUserId = localStorage.getItem('telegram_user_id');
      if (telegramUserId) registerUseridInput.value = telegramUserId;
    }

    function showRegisterError(message: string) {
      if (registerErrorMessage) {
        registerErrorMessage.textContent = message;
        registerErrorMessage.classList.remove('hidden');
      }
    }

    function hideRegisterError() {
      if (registerErrorMessage) {
        registerErrorMessage.classList.add('hidden');
      }
    }

    function setRegisterLoading(loading: boolean) {
      registerBtn.disabled = loading;
      const registerBtnText = registerBtn.querySelector('.btn-text') as HTMLElement;
      const registerBtnLoading = registerBtn.querySelector('.btn-loading') as HTMLElement;

      if (loading) {
        registerBtnText?.classList.add('hidden');
        registerBtnLoading?.classList.remove('hidden');
      } else {
        registerBtnText?.classList.remove('hidden');
        registerBtnLoading?.classList.add('hidden');
      }
    }

    async function loginUser(userid: string): Promise<UserData | null> {
      try {
        const apiUrl = (window as any).APP_CONFIG?.API_BASE_URL || 'https://misc-1.onrender.com';
        const response = await fetch(`${apiUrl}/cuser/${userid}`, {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' }
        });

        if (!response.ok) {
          if (response.status === 404) return null; // user not found
          throw new Error(`Server responded with ${response.status}`);
        }

        return await response.json();
      } catch (error) {
        console.error('Login error:', error);
        return null;
      }
    }

    async function registerUser(userid: string, username: string): Promise<boolean> {
      try {
        const apiUrl = (window as any).APP_CONFIG?.API_BASE_URL || 'https://misc-1.onrender.com';
        const response = await fetch(`${apiUrl}/nuser/${userid}/${username}`, {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' }
        });
        return response.ok;
      } catch (error) {
        console.error('Registration error:', error);
        return false;
      }
    }

    // === Main authentication flow ===
    async function checkAuthStatus() {
      const telegramUserId = localStorage.getItem('telegram_user_id');
      if (!telegramUserId) {
        console.warn('No Telegram user ID found');
        showModal();
        showRegisterForm();
        return false;
      }

      // already logged in?
      const storedUser = localStorage.getItem('medoracle_user');
      if (storedUser) {
        try {
          const userData = JSON.parse(storedUser);
          if (userData?.id === telegramUserId) {
            if ((window as any).authManager?.onLogin) {
              (window as any).authManager.onLogin();
            }
            return true;
          }
        } catch (e) {
          localStorage.removeItem('medoracle_user');
        }
      }

      showModal(); // show modal while checking
      const userData = await loginUser(telegramUserId);

      if (userData) {
        // auto-login success
        localStorage.setItem('medoracle_user', JSON.stringify(userData));
        hideModal();
        if ((window as any).authManager?.onLogin) {
          (window as any).authManager.onLogin();
        }
        return true;
      } else {
        // user not found → show registration
        showRegisterForm();
        return false;
      }
    }

    // === Registration submit ===
    registerForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      hideRegisterError();

      const userid = registerUseridInput.value.trim();
      const username = registerUsernameInput.value.trim();

      if (!userid || !username) {
        showRegisterError('Please fill in all fields');
        return;
      }

      setRegisterLoading(true);
      const success = await registerUser(userid, username);

      if (success) {
        const userData = await loginUser(userid);
        if (userData) {
          localStorage.setItem('medoracle_user', JSON.stringify(userData));
          hideModal();
          if ((window as any).authManager?.onLogin) {
            (window as any).authManager.onLogin();
          }
        }
      } else {
        showRegisterError('Registration failed. Try again.');
      }

      setRegisterLoading(false);
    });

    // clear errors while typing
    [registerUseridInput, registerUsernameInput].forEach(input =>
      input?.addEventListener('input', hideRegisterError)
    );

    // expose globally
    (window as any).loginModal = {
      show: showModal,
      hide: hideModal,
      checkAuth: checkAuthStatus
    };
  });
</script>
