---
// LoginModal.astro - Modal login popup component
---

<div id="login-modal" class="login-modal hidden">
  <div class="modal-backdrop"></div>
  <div class="modal-content">
    <div class="modal-header">
      <h2>Welcome to Medoracle Academia</h2>
      <p id="login-status">Checking your credentials...</p>
    </div>
    
    <!-- Auto Login Section -->
    <div id="auto-login-section" class="modal-form">
      <div class="auto-login-info">
        <div class="user-avatar" id="user-avatar">
          <span id="user-initial">?</span>
        </div>
        <div class="user-info">
          <h3 id="detected-username">Detecting user...</h3>
          <p id="detected-userid">ID: Loading...</p>
        </div>
      </div>
      
      <button type="button" class="modal-login-btn" id="auto-login-btn">
        <span class="btn-text">Continue as User</span>
        <span class="btn-loading hidden">Signing in...</span>
      </button>
      
      <button type="button" class="switch-manual-btn" id="switch-manual-btn">
        Use different account
      </button>
      
      <div id="modal-error-message" class="error-message hidden"></div>
    </div>
    
    <!-- Manual Login Section (Hidden by default) -->
    <form class="modal-form hidden" id="manual-login-form">
      <div class="form-group">
        <label for="modal-userid">User ID</label>
        <input 
          type="text" 
          id="modal-userid" 
          name="userid" 
          placeholder="Enter your User ID" 
          required 
        />
      </div>
      
      <div class="form-group">
        <label for="modal-username">Username</label>
        <input 
          type="text" 
          id="modal-username" 
          name="username" 
          placeholder="Enter your Username" 
          required 
        />
      </div>
      
      <button type="submit" class="modal-login-btn" id="manual-login-btn">
        <span class="btn-text">Sign In</span>
        <span class="btn-loading hidden">Signing in...</span>
      </button>
      
      <button type="button" class="switch-auto-btn" id="switch-auto-btn">
        Back to auto login
      </button>
      
      <div id="manual-error-message" class="error-message hidden"></div>
    </form>
    
    <div class="modal-footer">
      <p>Having trouble? <a href="/telegram-login/" target="_blank">Get help from Telegram</a></p>
      <p class="mandatory-notice">⚠️ Login is required to access this site</p>
    </div>
  </div>
</div>

<style>
  .login-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1rem;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .login-modal.show {
    opacity: 1;
    visibility: visible;
  }

  .modal-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
  }

  .modal-content {
    position: relative;
    background: var(--card-bg);
    backdrop-filter: blur(30px);
    -webkit-backdrop-filter: blur(30px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 24px;
    width: 100%;
    max-width: 450px;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
    transform: scale(0.9) translateY(20px);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .login-modal.show .modal-content {
    transform: scale(1) translateY(0);
  }

  .modal-header {
    padding: 2rem 2rem 1rem;
    text-align: center;
    position: relative;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }

  .modal-header h2 {
    font-size: 1.75rem;
    font-weight: 700;
    margin: 0 0 0.5rem 0;
    background: linear-gradient(135deg, #ffffff, #e0e0e0);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .modal-header p {
    color: rgba(255, 255, 255, 0.8);
    margin: 0;
    font-size: 1rem;
  }

  .modal-close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: var(--text-color);
    width: 36px;
    height: 36px;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .modal-close:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: scale(1.05);
  }

  .modal-close svg {
    width: 18px;
    height: 18px;
  }

  .modal-form {
    padding: 2rem;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-group label {
    font-weight: 600;
    color: var(--text-color);
    font-size: 0.95rem;
  }

  .form-group input {
    padding: 0.875rem 1rem;
    border: 2px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    background: rgba(255, 255, 255, 0.05);
    color: var(--text-color);
    font-size: 1rem;
    transition: all 0.3s ease;
  }

  .form-group input:focus {
    outline: none;
    border-color: var(--purple-primary);
    background: rgba(255, 255, 255, 0.1);
    box-shadow: 0 0 0 3px rgba(79, 59, 196, 0.1);
  }

  .form-group input::placeholder {
    color: rgba(255, 255, 255, 0.5);
  }

  .modal-login-btn {
    background: linear-gradient(135deg, var(--purple-primary), var(--purple-secondary));
    color: white;
    border: none;
    padding: 1rem 2rem;
    border-radius: 12px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .modal-login-btn:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(79, 59, 196, 0.3);
  }

  .modal-login-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }

  .btn-loading {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  .btn-loading::before {
    content: '';
    width: 16px;
    height: 16px;
    border: 2px solid transparent;
    border-top: 2px solid currentColor;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  .error-message {
    background: rgba(231, 76, 60, 0.1);
    border: 1px solid rgba(231, 76, 60, 0.3);
    color: #ff6b6b;
    padding: 0.875rem;
    border-radius: 8px;
    font-size: 0.9rem;
    text-align: center;
  }

  .hidden {
    display: none;
  }

  .modal-footer {
    padding: 1rem 2rem 2rem;
    text-align: center;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
  }

  .modal-footer p {
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.9rem;
    margin: 0;
  }

  .modal-footer a {
    color: var(--purple-primary);
    text-decoration: none;
    font-weight: 500;
  }

  .modal-footer a:hover {
    text-decoration: underline;
  }

  .mandatory-notice {
    color: #ff6b6b !important;
    font-weight: 600;
    font-size: 0.85rem;
    margin: 0.5rem 0 0 0;
    text-align: center;
  }

  /* Auto Login Styles */
  .auto-login-info {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1.5rem;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 12px;
    margin-bottom: 1.5rem;
  }

  .user-avatar {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background: linear-gradient(135deg, var(--purple-primary), var(--purple-secondary));
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    font-weight: 700;
    color: white;
    flex-shrink: 0;
  }

  .user-info {
    flex: 1;
  }

  .user-info h3 {
    margin: 0 0 0.25rem 0;
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--text-color);
  }

  .user-info p {
    margin: 0;
    font-size: 0.9rem;
    color: rgba(255, 255, 255, 0.7);
  }

  .switch-manual-btn, .switch-auto-btn {
    background: transparent;
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: rgba(255, 255, 255, 0.8);
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-top: 1rem;
    width: 100%;
  }

  .switch-manual-btn:hover, .switch-auto-btn:hover {
    background: rgba(255, 255, 255, 0.1);
    border-color: rgba(255, 255, 255, 0.3);
    color: var(--text-color);
  }

  @media (max-width: 480px) {
    .modal-content {
      margin: 1rem;
      max-width: calc(100% - 2rem);
    }

    .modal-header {
      padding: 1.5rem 1.5rem 1rem;
    }

    .modal-header h2 {
      font-size: 1.5rem;
    }

    .modal-form {
      padding: 1.5rem;
    }

    .modal-footer {
      padding: 1rem 1.5rem 1.5rem;
    }
  }

  /* Prevent body scroll when modal is open */
  body.modal-open {
    overflow: hidden;
  }
</style>

<script>
// Inline config to ensure it loads
(window as any).APP_CONFIG = {
  API_BASE_URL: 'https://misc-1.onrender.com',
  TELEGRAM_BOT_NAME: 'Med',
  MEDIA_API_BASE_URL: 'http://noods.ddnsfree.com',
  EDIA_API_BASE_URL: 'http://vid.ddnsfree.com',
};

(window as any).APP_CONFIG.QUOTA_CHECK = (userid: string) => `${(window as any).APP_CONFIG.API_BASE_URL}/quota/${userid}`;
(window as any).APP_CONFIG.VIDEO_QUOTA_DECREMENT = (userid: string) => `${(window as any).APP_CONFIG.API_BASE_URL}/dquota/${userid}/v`;
(window as any).APP_CONFIG.NOTE_QUOTA_DECREMENT = (userid: string) => `${(window as any).APP_CONFIG.API_BASE_URL}/dquota/${userid}/n`;
(window as any).APP_CONFIG.USER_LOGIN = (userid: string) => `${(window as any).APP_CONFIG.API_BASE_URL}/cuser/${userid}`;
(window as any).APP_CONFIG.TG_PLATFORM_CHECK = (userid: string, platform: string) => `${(window as any).APP_CONFIG.API_BASE_URL}/tgcheck/${userid}/${platform}`;
(window as any).APP_CONFIG.TELEGRAM_URL = `https://t.me/${(window as any).APP_CONFIG.TELEGRAM_BOT_NAME}`;
(window as any).APP_CONFIG.VIDEO_PLAYER_URL = (encodedId: string) => `${(window as any).APP_CONFIG.EDIA_API_BASE_URL}?vid=${encodedId}`;
(window as any).APP_CONFIG.NOTE_VIEWER_URL = (encodedId: string) => `${(window as any).APP_CONFIG.MEDIA_API_BASE_URL}?nid=${encodedId}`;
</script>
<script>
  interface UserData {
    id: string;
    username: string;
    plan: string;
    status: string;
  }

  // Run immediately and on page load events
  function initializeLoginModal() {
    console.log('LoginModal initialization started');
    const modal = document.getElementById('login-modal');
    const loginStatus = document.getElementById('login-status');
    
    // Auto login elements
    const autoLoginSection = document.getElementById('auto-login-section');
    const autoLoginBtn = document.getElementById('auto-login-btn');
    const switchManualBtn = document.getElementById('switch-manual-btn');
    const userInitial = document.getElementById('user-initial');
    const detectedUsername = document.getElementById('detected-username');
    const detectedUserid = document.getElementById('detected-userid');
    const errorMessage = document.getElementById('modal-error-message');
    
    // Manual login elements
    const manualLoginForm = document.getElementById('manual-login-form') as HTMLFormElement;
    const manualLoginBtn = document.getElementById('manual-login-btn');
    const switchAutoBtn = document.getElementById('switch-auto-btn');
    const useridInput = document.getElementById('modal-userid') as HTMLInputElement;
    const usernameInput = document.getElementById('modal-username') as HTMLInputElement;
    const manualErrorMessage = document.getElementById('manual-error-message');
    
    let detectedUser: any = null;

    function showModal() {
      modal?.classList.remove('hidden');
      document.body.classList.add('modal-open');
      setTimeout(() => {
        modal?.classList.add('show');
      }, 10);
    }

    function hideModal() {
      modal?.classList.remove('show');
      document.body.classList.remove('modal-open');
      setTimeout(() => {
        modal?.classList.add('hidden');
      }, 300);
    }

    // Telegram WebApp data extraction
    function extractTelegramUserData() {
      try {
        const webApp = (window as any).Telegram?.WebApp;
        if (!webApp) {
          console.log('Telegram WebApp not available');
          return null;
        }

        const initDataUnsafe = webApp.initDataUnsafe;
        if (!initDataUnsafe || !initDataUnsafe.user) {
          console.log('No user data in initDataUnsafe');
          return null;
        }

        const user = initDataUnsafe.user;
        console.log('Extracted Telegram user data:', user);
        
        return {
          id: user.id.toString(),
          first_name: user.first_name,
          last_name: user.last_name || '',
          username: user.username || user.first_name
        };
      } catch (error) {
        console.error('Error extracting Telegram user data:', error);
        return null;
      }
    }

    function showAutoError(message: string) {
      if (errorMessage) {
        errorMessage.textContent = message;
        errorMessage.classList.remove('hidden');
      }
    }

    function hideAutoError() {
      if (errorMessage) {
        errorMessage.classList.add('hidden');
      }
    }

    function showManualError(message: string) {
      if (manualErrorMessage) {
        manualErrorMessage.textContent = message;
        manualErrorMessage.classList.remove('hidden');
      }
    }

    function hideManualError() {
      if (manualErrorMessage) {
        manualErrorMessage.classList.add('hidden');
      }
    }

    function setAutoLoading(loading: boolean) {
      if (autoLoginBtn) {
        const btnText = autoLoginBtn.querySelector('.btn-text');
        const btnLoading = autoLoginBtn.querySelector('.btn-loading');
        
        (autoLoginBtn as HTMLButtonElement).disabled = loading;
        if (loading) {
          btnText?.classList.add('hidden');
          btnLoading?.classList.remove('hidden');
        } else {
          btnText?.classList.remove('hidden');
          btnLoading?.classList.add('hidden');
        }
      }
    }

    function setManualLoading(loading: boolean) {
      if (manualLoginBtn) {
        const btnText = manualLoginBtn.querySelector('.btn-text');
        const btnLoading = manualLoginBtn.querySelector('.btn-loading');
        
        (manualLoginBtn as HTMLButtonElement).disabled = loading;
        if (loading) {
          btnText?.classList.add('hidden');
          btnLoading?.classList.remove('hidden');
        } else {
          btnText?.classList.remove('hidden');
          btnLoading?.classList.add('hidden');
        }
      }
    }

    function switchToManualLogin() {
      autoLoginSection?.classList.add('hidden');
      manualLoginForm?.classList.remove('hidden');
      if (loginStatus) {
        loginStatus.textContent = 'Please enter your credentials';
      }
    }

    function switchToAutoLogin() {
      manualLoginForm?.classList.add('hidden');
      autoLoginSection?.classList.remove('hidden');
      if (loginStatus) {
        loginStatus.textContent = 'Continue with detected account';
      }
    }

    async function loginUser(userid: string, username: string): Promise<UserData | null> {
      try {
        console.log('Using API endpoint:', (window as any).APP_CONFIG.USER_LOGIN(userid));
        const response = await fetch((window as any).APP_CONFIG.USER_LOGIN(userid), {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          }
        });

        if (!response.ok) {
          throw new Error(`Server responded with ${response.status}: ${response.statusText}`);
        }

        const userData: UserData = await response.json();
        
        // Verify username matches
        if (userData.username.toLowerCase() !== username.toLowerCase()) {
          throw new Error('Username does not match the provided User ID');
        }

        return userData;
      } catch (error) {
        console.error('Login error:', error);
        
        // Provide specific error messages
        if (error instanceof TypeError && error.message.includes('fetch')) {
          throw new Error('Cannot connect to server. Please check your internet connection and try again.');
        }
        
        throw error;
      }
    }

    // Check if user is already logged in
    function checkAuthStatus() {
      const storedUser = localStorage.getItem('medoracle_user');
      if (!storedUser) {
        showModal();
        return false;
      }
      
      try {
        const userData = JSON.parse(storedUser);
        return true;
      } catch (error) {
        localStorage.removeItem('medoracle_user');
        showModal();
        return false;
      }
    }

    // Remove all modal close functionality - login is mandatory
    // modalClose?.addEventListener('click', hideModal);
    // modalBackdrop?.addEventListener('click', hideModal);

    // Disable escape key to close modal
    // document.addEventListener('keydown', (e) => {
    //   if (e.key === 'Escape' && modal?.classList.contains('show')) {
    //     hideModal();
    //   }
    // });

    // Manual login form handler
    manualLoginForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      hideManualError();

      const userid = useridInput?.value.trim();
      const username = usernameInput?.value.trim();

      if (!userid || !username) {
        showManualError('Please fill in all fields');
        return;
      }

      setManualLoading(true);

      try {
        const userData = await loginUser(userid, username);
        
        if (userData) {
          localStorage.setItem('medoracle_user', JSON.stringify(userData));
          hideModal();
          
          if ((window as any).authManager) {
            (window as any).authManager.onLogin();
          }
          
          const notification = document.createElement('div');
          notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(135deg, #27ae60, #2ecc71);
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 12px;
            font-weight: 500;
            z-index: 10000;
            box-shadow: 0 8px 25px rgba(39, 174, 96, 0.3);
            animation: slideIn 0.3s ease;
          `;
          notification.textContent = `Welcome, ${userData.username}!`;
          document.body.appendChild(notification);
          
          setTimeout(() => {
            notification.remove();
          }, 3000);
        }
      } catch (error) {
        if (error instanceof Error) {
          showManualError(error.message);
        } else {
          showManualError('Login failed. Please check your credentials and try again.');
        }
      } finally {
        setManualLoading(false);
      }
    });

    // Clear error messages when user starts typing
    [useridInput, usernameInput].forEach(input => {
      input?.addEventListener('input', hideManualError);
    });

    // Auto login functionality
    async function attemptAutoLogin() {
      const telegramUser = extractTelegramUserData();
      if (!telegramUser) {
        console.log('No Telegram user data found, switching to manual login');
        switchToManualLogin();
        return;
      }

      detectedUser = telegramUser;
      
      // Update UI with detected user info
      if (userInitial) {
        userInitial.textContent = telegramUser.first_name.charAt(0).toUpperCase();
      }
      if (detectedUsername) {
        detectedUsername.textContent = `${telegramUser.first_name} ${telegramUser.last_name}`.trim();
      }
      if (detectedUserid) {
        detectedUserid.textContent = `ID: ${telegramUser.id}`;
      }
      if (autoLoginBtn) {
        const btnText = autoLoginBtn.querySelector('.btn-text');
        if (btnText) {
          btnText.textContent = `Continue as ${telegramUser.first_name}`;
        }
      }
      if (loginStatus) {
        loginStatus.textContent = 'Continue with your Telegram account';
      }
    }

    // Event listeners
    switchManualBtn?.addEventListener('click', switchToManualLogin);
    switchAutoBtn?.addEventListener('click', switchToAutoLogin);

    // Auto login button handler
    autoLoginBtn?.addEventListener('click', async () => {
      if (!detectedUser) {
        showAutoError('No user data detected');
        return;
      }

      hideAutoError();
      setAutoLoading(true);

      try {
        const userData = await loginUser(detectedUser.id, detectedUser.username);
        if (userData) {
          localStorage.setItem('medoracle_user', JSON.stringify(userData));
          hideModal();
          
          if ((window as any).authManager) {
            (window as any).authManager.onLogin();
          }
          
          console.log('Auto login successful');
        }
      } catch (error) {
        console.error('Auto login error:', error);
        if (error instanceof Error) {
          showAutoError(error.message);
        } else {
          showAutoError('Login failed. Please try manual login.');
        }
      } finally {
        setAutoLoading(false);
      }
    });

    // Initialize modal state
    checkAuthStatus();
    
    // Attempt auto login when modal is shown
    setTimeout(() => {
      attemptAutoLogin();
    }, 500);

    // Make functions globally available for other components
    console.log('Setting window.loginModal...');
    (window as any).loginModal = {
      show: showModal,
      hide: hideModal,
      checkAuth: checkAuthStatus
    };
    console.log('LoginModal initialization completed');
  }

  // Run initialization immediately
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeLoginModal);
  } else {
    initializeLoginModal();
  }

  // Also run on Astro page transitions
  document.addEventListener('astro:page-load', initializeLoginModal);
  document.addEventListener('astro:after-swap', initializeLoginModal);

  // Add slide in animation
  const style = document.createElement('style');
  style.textContent = `
    @keyframes slideIn {
      from {
        transform: translateX(100%);
        opacity: 0;
      }
      to {
        transform: translateX(0);
        opacity: 1;
      }
    }
  `;
  document.head.appendChild(style);
</script>
