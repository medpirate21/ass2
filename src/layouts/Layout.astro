---
import Navbar from '../components/Navbar.astro';
import Header from '../components/Header.astro';
import LoginModal from '../components/LoginModal.astro';
import TgCheckModal from '../components/TgCheckModal.astro';
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="view-transition" content="same-origin" />
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <title>{title}</title>
    <script>
      declare global {
        interface Window {
          toggleTheme: () => string;
          authManager: {
            check: () => boolean;
            onLogin: () => void;
            onLogout: () => void;
          };
          tgCheckModal?: {
            show: () => void;
            hide: () => void;
            checkPlatform: () => Promise<boolean>;
          };
        }
      }
      
      // Initialize theme management
      const initTheme = () => {
        const theme = localStorage.getItem('theme') || 'light';
        document.documentElement.className = theme;
      }

      // Run on initial load
      initTheme();

      // Handle theme toggle
      window.toggleTheme = () => {
        const isDark = document.documentElement.classList.contains('dark');
        const newTheme = isDark ? 'light' : 'dark';
        document.documentElement.className = newTheme;
        localStorage.setItem('theme', newTheme);
        return newTheme;
      };

      // Authentication management
      const checkAuth = () => {
        console.log('Checking authentication...');
        const storedUser = localStorage.getItem('medoracle_user');
        const appContent = document.getElementById('app-content');
        const authOverlay = document.getElementById('auth-overlay');
        
        console.log('Stored user:', storedUser ? 'exists' : 'not found');
        
        if (storedUser) {
          try {
            JSON.parse(storedUser);
            // User is authenticated - show content
            console.log('User authenticated, showing content');
            appContent?.classList.remove('hidden');
            authOverlay?.classList.add('hidden');
            return true;
          } catch (error) {
            console.log('Invalid stored user data, removing');
            localStorage.removeItem('medoracle_user');
          }
        }
        
        // User not authenticated - hide content and show login modal
        console.log('User not authenticated, showing auth overlay and login modal');
        appContent?.classList.add('hidden');
        authOverlay?.classList.remove('hidden');
        
        // Show login modal after ensuring it's available
        let retryCount = 0;
        const maxRetries = 25; // 5 seconds max (25 * 200ms)
        const showLoginModal = () => {
          if (window.loginModal) {
            console.log('Showing login modal');
            window.loginModal.show();
          } else if (retryCount < maxRetries) {
            retryCount++;
            console.log(`Login modal not available, retrying... (${retryCount}/${maxRetries})`);
            setTimeout(showLoginModal, 200);
          } else {
            console.error('LoginModal failed to load after maximum retries. Forcing modal display...');
            // Force show the modal element directly
            const modal = document.getElementById('login-modal');
            if (modal) {
              modal.classList.remove('hidden');
              modal.classList.add('show');
              document.body.classList.add('modal-open');
              console.log('Forced login modal to show');
              
              // Add form functionality since LoginModal script didn't load
              const form = document.getElementById('modal-login-form');
              const loginBtn = document.getElementById('modal-login-btn');
              const errorMessage = document.getElementById('modal-error-message');
              
              if (form && !form.hasAttribute('data-listener-added')) {
                form.setAttribute('data-listener-added', 'true');
                form.addEventListener('submit', async (e) => {
                  e.preventDefault();
                  console.log('Form submitted via fallback handler');
                  
                  const useridInput = document.getElementById('modal-userid') as HTMLInputElement;
                  const usernameInput = document.getElementById('modal-username') as HTMLInputElement;
                  
                  const userid = useridInput?.value.trim();
                  const username = usernameInput?.value.trim();
                  
                  if (!userid || !username) {
                    if (errorMessage) {
                      errorMessage.textContent = 'Please fill in all fields';
                      errorMessage.classList.remove('hidden');
                    }
                    return;
                  }
                  
                  // Set loading state
                  if (loginBtn) {
                    loginBtn.textContent = 'Signing in...';
                    loginBtn.setAttribute('disabled', 'true');
                  }
                  
                  try {
                    const response = await fetch(`https://misc-1.onrender.com/cuser/${userid}`, {
                      method: 'GET',
                      headers: { 'Content-Type': 'application/json' }
                    });
                    
                    if (!response.ok) {
                      throw new Error(`Server responded with ${response.status}`);
                    }
                    
                    const userData = await response.json();
                    
                    if (userData.username.toLowerCase() !== username.toLowerCase()) {
                      throw new Error('Username does not match the provided User ID');
                    }
                    
                    // Store user data and hide modal
                    localStorage.setItem('medoracle_user', JSON.stringify(userData));
                    modal.classList.remove('show');
                    document.body.classList.remove('modal-open');
                    setTimeout(() => modal.classList.add('hidden'), 300);
                    
                    // Notify auth manager
                    if (window.authManager) {
                      window.authManager.onLogin();
                    }
                    
                    console.log('Login successful via fallback');
                  } catch (error) {
                    console.error('Login error:', error);
                    if (errorMessage) {
                      errorMessage.textContent = error.message || 'Login failed. Please try again.';
                      errorMessage.classList.remove('hidden');
                    }
                  } finally {
                    if (loginBtn) {
                      loginBtn.textContent = 'Sign In';
                      loginBtn.removeAttribute('disabled');
                    }
                  }
                });
                console.log('Fallback form handler added');
              }
            } else {
              console.error('Login modal element not found in DOM');
            }
          }
        };
        setTimeout(showLoginModal, 100);
        
        return false;
      };

      // Global auth state manager
      window.authManager = {
        check: checkAuth,
        onLogin: () => {
          const appContent = document.getElementById('app-content');
          const authOverlay = document.getElementById('auth-overlay');
          appContent?.classList.remove('hidden');
          authOverlay?.classList.add('hidden');
        },
        onLogout: () => {
          const appContent = document.getElementById('app-content');
          const authOverlay = document.getElementById('auth-overlay');
          appContent?.classList.add('hidden');
          authOverlay?.classList.remove('hidden');
          
          // Show login modal after logout
          let logoutRetryCount = 0;
          const maxLogoutRetries = 25; // 5 seconds max
          const showLoginModalAfterLogout = () => {
            if (window.loginModal) {
              console.log('Showing login modal after logout');
              window.loginModal.show();
            } else if (logoutRetryCount < maxLogoutRetries) {
              logoutRetryCount++;
              console.log(`Login modal not available after logout, retrying... (${logoutRetryCount}/${maxLogoutRetries})`);
              setTimeout(showLoginModalAfterLogout, 200);
            } else {
              console.error('LoginModal failed to load after logout. Forcing modal display...');
              // Force show the modal element directly
              const modal = document.getElementById('login-modal');
              if (modal) {
                modal.classList.remove('hidden');
                modal.classList.add('show');
                document.body.classList.add('modal-open');
                console.log('Forced login modal to show after logout');
              } else {
                console.error('Login modal element not found in DOM after logout');
              }
            }
          };
          setTimeout(showLoginModalAfterLogout, 100);
        }
      };

      // Check auth on page load
      checkAuth();

      // Platform check function
      const checkTelegramPlatform = async () => {
        // Wait for Telegram WebApp to load
        let attempts = 0;
        while (!window.Telegram?.WebApp && attempts < 50) {
          await new Promise(resolve => setTimeout(resolve, 100));
          attempts++;
        }

        // Check if Telegram WebApp is available
        if (!window.Telegram?.WebApp) {
          console.log('Not in Telegram WebApp environment');
          return true; // Allow access if not in Telegram
        }

        const webApp = window.Telegram.WebApp;
        webApp.ready();

        console.log('Telegram WebApp detected, platform:', webApp.platform);
        
        const platform = webApp.platform.toLowerCase();
        const allowedPlatforms = ['ios', 'tdesktop', 'macos'];
        
        if (!allowedPlatforms.includes(platform)) {
          // Show platform restriction modal
          if (window.tgCheckModal) {
            const allowed = await window.tgCheckModal.checkPlatform();
            return allowed;
          }
          return false;
        }
        
        return true;
      };

      // Universal platform check on any page visit
      const universalPlatformCheck = async () => {
        console.log('Starting platform check...');
        try {
          const platformAllowed = await checkTelegramPlatform();
          console.log('Platform check result:', platformAllowed);
          if (!platformAllowed) {
            // Block all site access
            const appContent = document.getElementById('app-content');
            appContent?.classList.add('hidden');
            console.log('Site access blocked due to platform restriction');
          } else {
            console.log('Platform check passed, site access allowed');
            // Ensure content is shown if platform is allowed
            const appContent = document.getElementById('app-content');
            const authOverlay = document.getElementById('auth-overlay');
            if (localStorage.getItem('medoracle_user')) {
              appContent?.classList.remove('hidden');
              authOverlay?.classList.add('hidden');
            }
          }
        } catch (error) {
          console.error('Platform check error:', error);
          // On error, allow access to prevent blocking legitimate users
          const appContent = document.getElementById('app-content');
          const authOverlay = document.getElementById('auth-overlay');
          if (localStorage.getItem('medoracle_user')) {
            appContent?.classList.remove('hidden');
            authOverlay?.classList.add('hidden');
          }
        }
      };

      // Run platform check after a short delay to allow DOM to load
      console.log('Initializing platform check...');
      setTimeout(() => {
        universalPlatformCheck();
      }, 100);

      // Reapply theme after page transitions
      document.addEventListener('astro:after-swap', () => {
        initTheme();
        checkAuth();
        universalPlatformCheck();
      });
      document.addEventListener('astro:page-load', () => {
        initTheme();
        checkAuth();
        universalPlatformCheck();
      });
    </script>
  </head>
  <body>
    <div id="app-content" class="app-content hidden">
      <Header />
      <main>
        <slot />
      </main>
      <Navbar />
    </div>
    <div id="auth-overlay" class="auth-overlay">
      <div class="auth-loading">
        <div class="auth-spinner"></div>
        <p>Checking authentication...</p>
      </div>
    </div>
    <LoginModal />
    <TgCheckModal />
  </body>
</html>

<style is:global>
  :root {
    /* Comprehensive Liquid Glass Design Variables */
    --glass-bg: rgba(255, 255, 255, 0.08);
    --glass-bg-secondary: rgba(255, 255, 255, 0.05);
    --glass-bg-tertiary: rgba(255, 255, 255, 0.03);
    --glass-bg-hover: rgba(255, 255, 255, 0.12);
    --glass-bg-active: rgba(255, 255, 255, 0.15);
    --glass-bg-accent: rgba(139, 92, 246, 0.1);
    
    --glass-border: 1px solid rgba(255, 255, 255, 0.18);
    --glass-border-light: 1px solid rgba(255, 255, 255, 0.1);
    --glass-border-color: rgba(255, 255, 255, 0.18);
    
    --glass-backdrop-filter: blur(16px);
    --glass-backdrop-filter-light: blur(8px);
    
    --glass-border-radius: 16px;
    --glass-border-radius-small: 12px;
    
    --glass-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
    --glass-shadow-hover: 0 12px 40px rgba(31, 38, 135, 0.5);
    --glass-shadow-active: 0 16px 48px rgba(31, 38, 135, 0.6);
    --glass-shadow-elevated: 0 25px 50px rgba(0, 0, 0, 0.3);
    --glass-shadow-button: 0 8px 25px rgba(0, 212, 255, 0.3);
    --glass-shadow-button-active: 0 12px 35px rgba(0, 212, 255, 0.4);
    --glass-shadow-accent: 0 4px 16px rgba(0, 212, 255, 0.3);
    --glass-shadow-accent-hover: 0 8px 24px rgba(0, 212, 255, 0.4);
    
    --glass-text: #ffffff;
    --glass-text-muted: rgba(255, 255, 255, 0.8);
    
    --glass-accent: #00d4ff;
    --glass-accent-secondary: #0099cc;
    --glass-accent-hover: #33ddff;
    --glass-accent-glow: rgba(0, 212, 255, 0.5);
    
    --glass-gradient-text: linear-gradient(135deg, #ffffff 0%, #e0e0e0 50%, #00d4ff 100%);
    
    --glass-shimmer: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    --glass-shimmer-subtle: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
    --glass-shimmer-bright: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    
    --primary-gradient: linear-gradient(135deg, #00d4ff 0%, #0099cc 100%);
    --secondary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    --accent-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
    
    /* Base colors */
    --purple-primary: #4f3bc4;
    --purple-secondary: #7e2fa4;
    --dark-primary: #13151a;
    --dark-secondary: #1f2937;

    /* Updated theme values for liquid glass */
    --bg-gradient: linear-gradient(135deg, #0099cc 0%, #00d4ff 50%, #667eea 100%);
    --text-color: #ffffff;
    --card-bg: var(--glass-bg);
    --nav-bg: var(--glass-bg);

    --header-height: 60px;
    --navbar-z-index: 100;
  }

  header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: var(--navbar-z-index);
  }

  html {
    font-family: system-ui, sans-serif;
    background: var(--bg-gradient);
    color: var(--text-color);
    transition: background 0.3s ease, color 0.3s ease;
    min-height: 100vh;
  }

  body {
    margin: 0;
    padding: 0;
    min-height: 100vh;
    background: var(--bg-gradient);
    background-attachment: fixed;
  }

  html.light {
    /* Light theme overrides */
  }

  html.dark {
    --bg-gradient: linear-gradient(135deg, #000000 0%, #0a0a0a 25%, #1a1a1a 75%, #000000 100%);
    --text-color: #ffffff;
    --card-bg: rgba(255, 255, 255, 0.05);
    --nav-bg: rgba(255, 255, 255, 0.05);
    
    /* Dark theme glass variables */
    --glass-bg: rgba(0, 0, 0, 0.4);
    --glass-bg-secondary: rgba(0, 0, 0, 0.3);
    --glass-bg-tertiary: rgba(0, 0, 0, 0.2);
    --glass-bg-accent: rgba(0, 153, 204, 0.1);
    --glass-bg-hover: rgba(255, 255, 255, 0.1);
    --glass-bg-active: rgba(255, 255, 255, 0.15);
    --glass-border: 1px solid rgba(255, 255, 255, 0.15);
    --glass-border-light: 1px solid rgba(255, 255, 255, 0.08);
    --glass-text: #ffffff;
    --glass-text-muted: rgba(255, 255, 255, 0.7);
    --glass-shadow: 0 8px 32px rgba(0, 0, 0, 0.6);
    --glass-shadow-hover: 0 12px 40px rgba(0, 0, 0, 0.8);
  }

  /* Prevent white flash during transitions */
  ::view-transition-old(root),
  ::view-transition-new(root) {
    animation: none;
    mix-blend-mode: normal;
  }

  /* Force background during transitions */
  ::view-transition-group(root) {
    background: var(--bg-gradient);
  }

  /* Remove transition animation */
  html {
    view-transition-name: none;
  }

  /* Keep main content transition */
  main {
    view-transition-name: main;
    position: relative;
    z-index: 1;
    margin-top: var(--header-height);
  }

  body {
    margin: 0;
    min-height: 100vh;
    position: relative;
    color: var(--text-color);
  }

  .background {
    display: none; /* Remove duplicate background */
  }

  .blur {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    backdrop-filter: blur(100px);
    z-index: -1;
  }

  main {
    margin: auto;
    padding: 5rem 1.5rem 1.5rem;
    max-width: 90ch;
    animation: fade-in 0.3s ease-out;
    view-transition-name: main;
  }

  @media (max-width: 768px) {
    main {
      padding-bottom: 5rem;
    }
  }

  @keyframes fade-in {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fade-slide {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  /* Remove tap highlight color on mobile */
  * {
    -webkit-tap-highlight-color: transparent;
    -webkit-touch-callout: none;
  }

  /* Remove blue outline on buttons and links */
  button, a {
    -webkit-tap-highlight-color: transparent;
    -webkit-user-select: none;
    -webkit-touch-callout: none;
    user-select: none;
  }

  /* Authentication overlay and content protection */
  .app-content.hidden {
    display: none !important;
  }

  .auth-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: var(--bg-gradient);
    z-index: 9998;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .auth-overlay.hidden {
    display: none;
  }

  .auth-loading {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1.5rem;
    color: var(--text-color);
  }

  .auth-spinner {
    width: 50px;
    height: 50px;
    border: 3px solid rgba(255, 255, 255, 0.1);
    border-top: 3px solid var(--purple-primary);
    border-radius: 50%;
    animation: auth-spin 1s linear infinite;
  }

  @keyframes auth-spin {
    to { transform: rotate(360deg); }
  }

  .auth-loading p {
    font-size: 1.2rem;
    font-weight: 500;
    opacity: 0.9;
  }
</style>
