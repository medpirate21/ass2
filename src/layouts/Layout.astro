---
import Navbar from '../components/Navbar.astro';
import Header from '../components/Header.astro';
import LoginModal from '../components/LoginModal.astro';
import { ViewTransitions } from 'astro:transitions';
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="view-transition" content="same-origin" />
    <ViewTransitions />
    <title>{title}</title>
    
    <!-- Telegram WebApp Script -->
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <script src="/src/config.js"></script>
    <script>
      // @ts-nocheck
      
      // Initialize theme management
      const initTheme = () => {
        const theme = localStorage.getItem('theme') || 'light';
        document.documentElement.className = theme;
      }

      // Run on initial load
      initTheme();

      // Handle theme toggle
      window.toggleTheme = () => {
        const isDark = document.documentElement.classList.contains('dark');
        const newTheme = isDark ? 'light' : 'dark';
        document.documentElement.className = newTheme;
        localStorage.setItem('theme', newTheme);
        return newTheme;
      };

      // Initialize Telegram WebApp and Platform Guard
      const initTelegramApp = async () => {
        // Load external script and wait for initialization
        loadTelegramScript();
        
        // Wait for script to load and initialize
        await new Promise(resolve => {
          const checkInit = () => {
            if (window.telegramWebApp && window.platformGuard) {
              resolve();
            } else {
              setTimeout(checkInit, 100);
            }
          };
          checkInit();
        });
        
        // Initialize platform guard
        await window.platformGuard.init();
      };

      // Load external Telegram initialization script
      const loadTelegramScript = () => {
        const script = document.createElement('script');
        script.src = '/src/scripts/telegram-init.js';
        script.async = true;
        document.head.appendChild(script);
      };

      // Authentication management - now checks platform first
      const checkAuth = () => {
        // First check platform compatibility
        const telegramApp = window.telegramWebApp;
        const platform = telegramApp?.getPlatform() || detectPlatformFallback();
        
        // If not iOS/macOS, redirect immediately
        if (platform !== 'ios' && platform !== 'macos') {
          window.location.href = '/download';
          return false;
        }
        
        const storedUser = localStorage.getItem('medoracle_user');
        const appContent = document.getElementById('app-content');
        const authOverlay = document.getElementById('auth-overlay');
        
        if (storedUser) {
          try {
            const userData = JSON.parse(storedUser);
            // Verify it's a Telegram user with valid ID and correct platform
            if (userData.id && (userData.platform === 'ios' || userData.platform === 'macos')) {
              // User is authenticated - show content
              appContent?.classList.remove('hidden');
              authOverlay?.classList.add('hidden');
              return true;
            }
          } catch (error) {
            localStorage.removeItem('medoracle_user');
            localStorage.removeItem('telegram_user_id');
          }
        }
        
        // User not authenticated - hide content and show loading
        appContent?.classList.add('hidden');
        authOverlay?.classList.remove('hidden');
        return false;
      };

      // Platform detection fallback
      const detectPlatformFallback = () => {
        const userAgent = navigator.userAgent.toLowerCase();
        if (userAgent.includes('iphone') || userAgent.includes('ipad')) return 'ios';
        if (userAgent.includes('mac')) return 'macos';
        if (userAgent.includes('android')) return 'android';
        if (userAgent.includes('win')) return 'windows';
        return 'unknown';
      };

      // Global auth state manager
      window.authManager = {
        check: checkAuth,
        onLogin: () => {
          const appContent = document.getElementById('app-content');
          const authOverlay = document.getElementById('auth-overlay');
          appContent?.classList.remove('hidden');
          authOverlay?.classList.add('hidden');
        },
        onLogout: () => {
          const appContent = document.getElementById('app-content');
          const authOverlay = document.getElementById('auth-overlay');
          appContent?.classList.add('hidden');
          authOverlay?.classList.remove('hidden');
        }
      };

      // Initialize app with immediate platform check
      const initApp = async () => {
        // Immediate platform check before any other initialization
        const platform = detectPlatformFallback();
        if (platform !== 'ios' && platform !== 'macos') {
          window.location.href = '/download';
          return;
        }
        
        await initTelegramApp();
        checkAuth();
      };

      // Start initialization immediately
      initApp();

      // Listen for user authentication from platform guard
      window.addEventListener('user-authenticated', () => {
        checkAuth();
      });

      // Reapply theme after page transitions
      document.addEventListener('astro:after-swap', () => {
        initTheme();
        checkAuth();
      });
      document.addEventListener('astro:page-load', () => {
        initTheme();
        checkAuth();
      });
    </script>
  </head>
  <body>
    <div id="app-content" class="app-content hidden">
      <Header />
      <main>
        <slot />
      </main>
      <Navbar />
    </div>
    <div id="auth-overlay" class="auth-overlay">
      <div class="auth-loading">
        <div class="auth-spinner"></div>
        <p>Initializing Telegram Mini App...</p>
        <p class="auth-subtext">Verifying iOS access and user credentials</p>
      </div>
    </div>
    <LoginModal />
  </body>
</html>

<style is:global>
  :root {
    /* Base colors */
    --purple-primary: #4f3bc4;
    --purple-secondary: #7e2fa4;
    --dark-primary: #13151a;
    --dark-secondary: #1f2937;

    /* Default theme values */
    --bg-gradient: linear-gradient(45deg, var(--purple-primary), var(--purple-secondary));
    --text-color: #ffffff;
    --card-bg: rgba(255, 255, 255, 0.15);
    --nav-bg: rgba(255, 255, 255, 0.12);

    --header-height: 60px;
    --navbar-z-index: 100;
  }

  header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: var(--navbar-z-index);
  }

  html {
    font-family: system-ui, sans-serif;
    background: var(--bg-gradient);
    color: var(--text-color);
    transition: background 0.3s ease, color 0.3s ease;
  }

  html.light {
    /* Light theme overrides */
  }

  html.dark {
    --bg-gradient: linear-gradient(45deg, var(--dark-primary), var(--dark-secondary));
    --text-color: #e1e1e1;
    --card-bg: rgba(0, 0, 0, 0.3);
    --nav-bg: rgba(0, 0, 0, 0.25);
  }

  /* Prevent white flash during transitions */
  ::view-transition-old(root),
  ::view-transition-new(root) {
    animation: none;
    mix-blend-mode: normal;
  }

  /* Force background during transitions */
  ::view-transition-group(root) {
    background: var(--bg-gradient);
  }

  /* Remove transition animation */
  html {
    view-transition-name: none;
  }

  /* Keep main content transition */
  main {
    view-transition-name: main;
    position: relative;
    z-index: 1;
    margin-top: var(--header-height);
  }

  body {
    margin: 0;
    min-height: 100vh;
    position: relative;
    color: var(--text-color);
  }

  .background {
    display: none; /* Remove duplicate background */
  }

  .blur {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    backdrop-filter: blur(100px);
    z-index: -1;
  }

  main {
    margin: auto;
    padding: 5rem 1.5rem 1.5rem;
    max-width: 90ch;
    animation: fade-in 0.3s ease-out;
    view-transition-name: main;
  }

  @media (max-width: 768px) {
    main {
      padding-bottom: 5rem;
    }
  }

  @keyframes fade-in {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fade-slide {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  /* Remove tap highlight color on mobile */
  * {
    -webkit-tap-highlight-color: transparent;
    -webkit-touch-callout: none;
  }

  /* Remove blue outline on buttons and links */
  button, a {
    -webkit-tap-highlight-color: transparent;
    -webkit-user-select: none;
    -webkit-touch-callout: none;
    user-select: none;
  }

  /* Authentication overlay and content protection */
  .app-content.hidden {
    display: none !important;
  }

  .auth-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: var(--bg-gradient);
    z-index: 9998;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .auth-overlay.hidden {
    display: none;
  }

  .auth-loading {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1.5rem;
    color: var(--text-color);
  }

  .auth-spinner {
    width: 50px;
    height: 50px;
    border: 3px solid rgba(255, 255, 255, 0.1);
    border-top: 3px solid var(--purple-primary);
    border-radius: 50%;
    animation: auth-spin 1s linear infinite;
  }

  @keyframes auth-spin {
    to { transform: rotate(360deg); }
  }

  .auth-loading p {
    font-size: 1.2rem;
    font-weight: 500;
    opacity: 0.9;
  }

  .auth-subtext {
    font-size: 0.9rem !important;
    opacity: 0.7 !important;
    margin-top: -0.5rem;
  }
</style>
