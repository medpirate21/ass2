---
import Navbar from '../components/Navbar.astro';
import Header from '../components/Header.astro';
import LoginModal from '../components/LoginModal.astro';
import { ViewTransitions } from 'astro:transitions';
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="view-transition" content="same-origin" />
    <ViewTransitions />
    <title>{title}</title>
    
    <script src="/src/config.js"></script>
    <script>
      // Initialize theme management
      const initTheme = () => {
        const theme = localStorage.getItem('theme') || 'light';
        document.documentElement.className = theme;
      }

      // Run on initial load
      initTheme();

      // Handle theme toggle
      (window as any).toggleTheme = () => {
        const isDark = document.documentElement.classList.contains('dark');
        const newTheme = isDark ? 'light' : 'dark';
        document.documentElement.className = newTheme;
        localStorage.setItem('theme', newTheme);
        return newTheme;
      };

      // Platform detection
      const detectPlatform = () => {
        const userAgent = navigator.userAgent.toLowerCase();
        
        if (userAgent.includes('iphone') || userAgent.includes('ipad')) {
          return 'ios';
        } else if (userAgent.includes('macintosh') || userAgent.includes('mac os x')) {
          return 'macos';
        } else if (userAgent.includes('android')) {
          return 'android';
        } else if (userAgent.includes('windows')) {
          return 'windows';
        } else if (userAgent.includes('linux')) {
          return 'linux';
        }
        
        return 'unknown';
      };

      // Check if platform is allowed (iOS, iPadOS, macOS, or Telegram Desktop)
      const isAllowedPlatform = () => {
        const platform = detectPlatform();
        const storedPlatform = localStorage.getItem('telegram_platform');
        
        // Allow iOS, macOS, and Telegram Desktop users
        const allowedPlatforms = ['ios', 'macos'];
        
        // Check if running in Telegram Desktop (Windows/Linux with Telegram WebApp)
        const isTelegramDesktop = (platform === 'windows' || platform === 'linux') && 
                                  (window as any).Telegram?.WebApp;
        
        return allowedPlatforms.includes(platform) || 
               (storedPlatform && allowedPlatforms.includes(storedPlatform)) || 
               isTelegramDesktop;
      };

      // Immediate platform check - runs before anything else
      const immediateplatformCheck = () => {
        // Skip check only for download page
        if (window.location.pathname === '/download') {
          return true;
        }

        const platform = detectPlatform();
        const storedPlatform = localStorage.getItem('telegram_platform');
        const hasTelegramWebApp = !!(window as any).Telegram?.WebApp;
        const isTelegramDesktop = (platform === 'windows' || platform === 'linux') && hasTelegramWebApp;
        
        console.log('üîç Platform Detection:', {
          detectedPlatform: platform,
          storedPlatform,
          hasTelegramWebApp,
          isTelegramDesktop,
          userAgent: navigator.userAgent
        });

        // Use the new isAllowedPlatform function
        if (!isAllowedPlatform()) {
          console.log('üö´ Platform not allowed, blocking site access completely');
          // Block entire site for non-allowed platforms
          document.body.innerHTML = `
            <div style="
              position: fixed; top: 0; left: 0; width: 100%; height: 100%;
              background: linear-gradient(45deg, #4f3bc4, #7e2fa4);
              display: flex; align-items: center; justify-content: center;
              font-family: system-ui, sans-serif; color: white; text-align: center;
              z-index: 99999;
            ">
              <div style="max-width: 400px; padding: 2rem;">
                <h2 style="margin-bottom: 1rem;">Access Restricted</h2>
                <p style="margin-bottom: 1.5rem; opacity: 0.9;">
                  This app is only available on iOS, iPadOS, macOS, or Telegram Desktop.
                </p>
                <p style="font-size: 0.9rem; opacity: 0.7;">
                  Please access through Telegram on a supported device.
                </p>
              </div>
            </div>
          `;
          return false;
        }
        
        console.log('‚úÖ Platform allowed, proceeding with authentication');
        return true;
      };

      // Show/hide auth overlay
      const showAuthOverlay = () => {
        const appContent = document.getElementById('app-content');
        const authOverlay = document.getElementById('auth-overlay');
        
        if (appContent) appContent.classList.add('hidden');
        if (authOverlay) authOverlay.classList.remove('hidden');
      };

      const showApp = () => {
        const appContent = document.getElementById('app-content');
        const authOverlay = document.getElementById('auth-overlay');
        
        if (appContent) appContent.classList.remove('hidden');
        if (authOverlay) authOverlay.classList.add('hidden');
      };


      

      // Show welcome message for allowed users
      const showWelcomeMessage = () => {
        const platform = detectPlatform();
        const storedPlatform = localStorage.getItem('telegram_platform');
        const userId = localStorage.getItem('telegram_user_id');
        
        if (isAllowedPlatform() && userId) {
          // Remove existing welcome message
          const existingWelcome = document.getElementById('welcome-message');
          if (existingWelcome) {
            existingWelcome.remove();
          }

          // Create welcome message
          const welcomeDiv = document.createElement('div');
          welcomeDiv.id = 'welcome-message';
          // Determine platform display name
          let platformName = 'User';
          const isTelegramDesktop = (platform === 'windows' || platform === 'linux') && 
                                    (window as any).Telegram?.WebApp;
          
          if (platform === 'ios' || storedPlatform === 'ios') {
            platformName = 'iOS User';
          } else if (platform === 'macos' || storedPlatform === 'macos') {
            platformName = 'macOS User';
          } else if (isTelegramDesktop) {
            platformName = 'Telegram Desktop User';
          }
          
          welcomeDiv.innerHTML = `
            <div style="position: fixed; top: 20px; left: 20px; background: rgba(79, 59, 196, 0.9); color: white; padding: 12px 16px; border-radius: 8px; font-size: 14px; z-index: 1000; backdrop-filter: blur(10px); border: 1px solid rgba(255, 255, 255, 0.2);">
              Welcome ${platformName}! 
              <br><strong>ID:</strong> ${userId}
              <button onclick="this.parentElement.parentElement.remove()" style="background: none; border: none; color: white; font-size: 16px; cursor: pointer; float: right; margin-left: 10px;">√ó</button>
            </div>
          `;
          document.body.appendChild(welcomeDiv);

          // Auto-hide after 5 seconds
          setTimeout(() => {
            const welcomeEl = document.getElementById('welcome-message');
            if (welcomeEl) welcomeEl.remove();
          }, 5000);
        }
      };

      // Debug overlay for authentication debugging
      const createDebugOverlay = () => {
        const debugOverlay = document.createElement('div');
        debugOverlay.id = 'debug-overlay';
        debugOverlay.style.cssText = `
          position: fixed;
          bottom: 0;
          left: 0;
          right: 0;
          background: rgba(0, 0, 0, 0.9);
          color: #00ff00;
          font-family: 'Courier New', monospace;
          font-size: 12px;
          padding: 10px;
          z-index: 9999;
          max-height: 200px;
          overflow-y: auto;
          border-top: 2px solid #00ff00;
          display: none;
        `;
        debugOverlay.innerHTML = `
          <div style="display: flex; justify-content: between; align-items: center; margin-bottom: 10px;">
            <strong>üêõ AUTH DEBUG OVERLAY</strong>
            <button onclick="document.getElementById('debug-overlay').style.display='none'" style="background: #ff0000; color: white; border: none; padding: 2px 8px; margin-left: auto; cursor: pointer;">‚úï</button>
          </div>
          <div id="debug-content"></div>
        `;
        document.body.appendChild(debugOverlay);
        
        // Add toggle button
        const toggleBtn = document.createElement('button');
        toggleBtn.style.cssText = `
          position: fixed;
          bottom: 10px;
          right: 10px;
          background: #4f3bc4;
          color: white;
          border: none;
          padding: 8px 12px;
          border-radius: 20px;
          cursor: pointer;
          z-index: 10000;
          font-size: 12px;
        `;
        toggleBtn.textContent = 'üêõ DEBUG';
        toggleBtn.onclick = () => {
          const overlay = document.getElementById('debug-overlay');
          if (overlay) {
            overlay.style.display = overlay.style.display === 'none' ? 'block' : 'none';
            updateDebugInfo();
          }
        };
        document.body.appendChild(toggleBtn);
      };

      const updateDebugInfo = () => {
        const debugContent = document.getElementById('debug-content');
        if (!debugContent) return;
        
        const telegramUserId = localStorage.getItem('telegram_user_id');
        const telegramPlatform = localStorage.getItem('telegram_platform');
        const medoracleUser = localStorage.getItem('medoracle_user');
        const currentPath = window.location.pathname;
        
        let userObj: any = null;
        try {
          userObj = medoracleUser ? JSON.parse(medoracleUser) : null;
        } catch (e) {
          userObj = 'INVALID JSON';
        }
        
        const currentPlatform = detectPlatform();
        const isTelegramDesktop = (currentPlatform === 'windows' || currentPlatform === 'linux') && 
                                  (window as any).Telegram?.WebApp;
        const isAllowed = isAllowedPlatform();
        
        console.log('üêõ DEBUG UPDATE:', {
          currentPath,
          platform: currentPlatform,
          storedPlatform: telegramPlatform,
          telegramUserId,
          medoracleUser: userObj,
          authStatus: medoracleUser ? 'LOGGED IN' : 'NOT LOGGED IN',
          isAllowedPlatform: isAllowed,
          isTelegramDesktop,
          timestamp: new Date().toLocaleTimeString()
        });
        
        debugContent.innerHTML = `
          <div><strong>Current Path:</strong> ${currentPath}</div>
          <div><strong>Platform:</strong> ${currentPlatform} (stored: ${telegramPlatform || 'none'})</div>
          <div><strong>Allowed Platform:</strong> ${isAllowed ? '‚úÖ YES' : '‚ùå NO'}</div>
          <div><strong>Telegram Desktop:</strong> ${isTelegramDesktop ? '‚úÖ YES' : '‚ùå NO'}</div>
          <div><strong>Telegram User ID:</strong> ${telegramUserId || 'none'}</div>
          <div><strong>Medoracle User:</strong> ${userObj ? (typeof userObj === 'string' ? userObj : JSON.stringify(userObj, null, 2)) : 'none'}</div>
          <div><strong>Auth Status:</strong> ${medoracleUser ? '‚úÖ LOGGED IN' : '‚ùå NOT LOGGED IN'}</div>
          <div><strong>Modal State:</strong> ${document.getElementById('login-modal')?.classList.contains('hidden') ? 'HIDDEN' : 'VISIBLE'}</div>
          <div><strong>App Content:</strong> ${document.getElementById('app-content')?.classList.contains('hidden') ? 'HIDDEN' : 'VISIBLE'}</div>
          <div><strong>Auth Overlay:</strong> ${document.getElementById('auth-overlay')?.classList.contains('hidden') ? 'HIDDEN' : 'VISIBLE'}</div>
          <div><strong>Timestamp:</strong> ${new Date().toLocaleTimeString()}</div>
        `;
      };

      // Global auth state manager
      (window as any).authManager = {
        onLogin: () => {
          const appContent = document.getElementById('app-content');
          const authOverlay = document.getElementById('auth-overlay');
          appContent?.classList.remove('hidden');
          authOverlay?.classList.add('hidden');
          showWelcomeMessage();
          updateDebugInfo();
        },
        onLogout: () => {
          localStorage.removeItem('medoracle_user');
          const welcomeEl = document.getElementById('welcome-message');
          if (welcomeEl) welcomeEl.remove();
          
          // Reset auth flags to allow re-authentication
          (window as any).__medoraAuthTriggered = false;
          if ((window as any).__medoraAuthFlags) {
            (window as any).__medoraAuthFlags.regShown = false;
            (window as any).__medoraAuthFlags.checking = false;
          }
          
          showAuthOverlay();
          updateDebugInfo();
          
          if ((window as any).loginModal?.checkAuth) {
            (window as any).loginModal.checkAuth();
          }
        }
      };

      // Create debug overlay
      createDebugOverlay();

      // Initialize app once (global guard across page transitions)
      const initializeApp = () => {
        if ((window as any).__medoraInitDone) return;
        (window as any).__medoraInitDone = true;
        
        console.log('üöÄ Initializing app...');
        
        // Extract Telegram user data first
        if ((window as any).Telegram?.WebApp) {
          const webApp = (window as any).Telegram.WebApp;
          if (webApp.initDataUnsafe?.user) {
            const userId = webApp.initDataUnsafe.user.id.toString();
            const platform = webApp.platform || detectPlatform();
            
            console.log('üì± Telegram user data extracted:', {
              userId,
              platform,
              username: webApp.initDataUnsafe.user.username
            });
            
            localStorage.setItem('telegram_user_id', userId);
            localStorage.setItem('telegram_platform', platform);
          }
        }
        
        if (immediateplatformCheck()) {
          // Avoid triggering auth multiple times
          if (!(window as any).__medoraAuthTriggered) {
            (window as any).__medoraAuthTriggered = true;
            // Hide auth overlay immediately, let LoginModal handle UI
            const authOverlay = document.getElementById('auth-overlay');
            if (authOverlay) authOverlay.classList.add('hidden');
            
            // Delay auth check to prevent race conditions
            setTimeout(() => {
              const flags = (window as any).__medoraAuthFlags;
              // Skip if registration already shown or a check is ongoing
              if (flags?.regShown || flags?.checking) {
                return;
              }
              if ((window as any).loginModal?.checkAuth) {
                (window as any).loginModal.checkAuth();
              }
            }, 100);
          }
        }
      };

      // Check if Telegram WebApp is already loaded, otherwise wait
      if ((window as any).Telegram?.WebApp) {
        console.log('üöÄ Telegram WebApp already loaded');
        initializeApp();
      } else {
        console.log('‚è≥ Waiting for Telegram WebApp to load...');
        // Listen for Telegram WebApp ready event
        const checkTelegramReady = () => {
          if ((window as any).Telegram?.WebApp) {
            console.log('‚úÖ Telegram WebApp loaded');
            initializeApp();
          } else {
            setTimeout(checkTelegramReady, 100);
          }
        };
        checkTelegramReady();
      }

      // Only handle theme on page transitions - no re-initialization
      document.addEventListener('astro:after-swap', () => {
        initTheme();
      });
      document.addEventListener('astro:page-load', () => {
        initTheme();
      });
    </script>
  </head>
  <body>
    <div id="app-content" class="app-content hidden">
      <Header />
      <main>
        <slot />
      </main>
      <Navbar />
    </div>
    <div id="auth-overlay" class="auth-overlay">
      <div class="auth-loading">
        <div class="auth-spinner"></div>
        <p>Checking authentication...</p>
      </div>
    </div>
    <LoginModal />
  </body>
</html>

<style is:global>
  :root {
    /* Base colors */
    --purple-primary: #4f3bc4;
    --purple-secondary: #7e2fa4;
    --dark-primary: #13151a;
    --dark-secondary: #1f2937;

    /* Default theme values */
    --bg-gradient: linear-gradient(45deg, var(--purple-primary), var(--purple-secondary));
    --text-color: #ffffff;
    --card-bg: rgba(255, 255, 255, 0.15);
    --nav-bg: rgba(255, 255, 255, 0.12);

    --header-height: 60px;
    --navbar-z-index: 100;
  }

  header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: var(--navbar-z-index);
  }

  html {
    font-family: system-ui, sans-serif;
    background: var(--bg-gradient);
    color: var(--text-color);
    transition: background 0.3s ease, color 0.3s ease;
  }

  html.light {
    /* Light theme overrides */
  }

  html.dark {
    --bg-gradient: linear-gradient(45deg, var(--dark-primary), var(--dark-secondary));
    --text-color: #e1e1e1;
    --card-bg: rgba(0, 0, 0, 0.3);
    --nav-bg: rgba(0, 0, 0, 0.25);
  }

  /* Prevent white flash during transitions */
  ::view-transition-old(root),
  ::view-transition-new(root) {
    animation: none;
    mix-blend-mode: normal;
  }

  /* Force background during transitions */
  ::view-transition-group(root) {
    background: var(--bg-gradient);
  }

  /* Remove transition animation */
  html {
    view-transition-name: none;
  }

  /* Keep main content transition */
  main {
    view-transition-name: main;
    position: relative;
    z-index: 1;
    margin: auto;
    margin-top: var(--header-height);
    padding: 5rem 1.5rem 1.5rem;
    max-width: 90ch;
    animation: fade-in 0.3s ease-out;
  }

  body {
    margin: 0;
    min-height: 100vh;
    position: relative;
    color: var(--text-color);
  }

  .background {
    display: none; /* Remove duplicate background */
  }

  .blur {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    backdrop-filter: blur(100px);
    z-index: -1;
  }


  @media (max-width: 768px) {
    main {
      padding-bottom: 5rem;
    }
  }

  @keyframes fade-in {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fade-slide {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  /* Remove tap highlight color on mobile */
  * {
    -webkit-tap-highlight-color: transparent;
    -webkit-touch-callout: none;
  }

  /* Remove blue outline on buttons and links */
  button, a {
    -webkit-tap-highlight-color: transparent;
    -webkit-user-select: none;
    -webkit-touch-callout: none;
    user-select: none;
  }

  /* Authentication overlay and content protection */
  .app-content.hidden {
    display: none !important;
  }

  .auth-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: var(--bg-gradient);
    z-index: 9998;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .auth-overlay.hidden {
    display: none;
  }

  .auth-loading {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1.5rem;
    color: var(--text-color);
  }

  .auth-spinner {
    width: 50px;
    height: 50px;
    border: 3px solid rgba(255, 255, 255, 0.1);
    border-top: 3px solid var(--purple-primary);
    border-radius: 50%;
    animation: auth-spin 1s linear infinite;
  }

  @keyframes auth-spin {
    to { transform: rotate(360deg); }
  }

  .auth-loading p {
    font-size: 1.2rem;
    font-weight: 500;
    opacity: 0.9;
  }

  .auth-subtext {
    font-size: 0.9rem !important;
    opacity: 0.7 !important;
    margin-top: -0.5rem;
  }
</style>
