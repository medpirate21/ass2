---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Login - Medoracle Academia">
  <div class="login-container">
    <div class="login-card">
      <h1>Welcome Back</h1>
      <p class="subtitle">Sign in with your Medoracle credentials</p>
      
      <form class="login-form" id="login-form">
        <div class="form-group">
          <label for="userid">User ID</label>
          <input 
            type="text" 
            id="userid" 
            name="userid" 
            placeholder="Enter your User ID" 
            required 
          />
        </div>
        
        <div class="form-group">
          <label for="username">Username</label>
          <input 
            type="text" 
            id="username" 
            name="username" 
            placeholder="Enter your Username" 
            required 
          />
        </div>
        
        <button type="submit" class="login-btn" id="login-btn">
          <span class="btn-text">Login</span>
          <span class="btn-loading hidden">Logging in...</span>
        </button>
        
        <div id="error-message" class="error-message hidden"></div>
        <div id="success-message" class="success-message hidden"></div>
      </form>
      
      <div class="help-text">
        <p>Don't have credentials? Get them from our <a href="/telegram-login/">Telegram Login</a></p>
      </div>
    </div>
  </div>
</Layout>

<style>
  .login-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: calc(100vh - 120px);
    padding: 2rem 1rem;
  }

  .login-card {
    background: var(--card-bg);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 20px;
    padding: 3rem 2rem;
    width: 100%;
    max-width: 400px;
    text-align: center;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
  }

  h1 {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    background: linear-gradient(135deg, #ffffff, #e0e0e0);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .subtitle {
    color: rgba(255, 255, 255, 0.8);
    margin-bottom: 2rem;
    font-size: 1.1rem;
  }

  .login-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    text-align: left;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-group label {
    font-weight: 600;
    color: var(--text-color);
    font-size: 0.95rem;
  }

  .form-group input {
    padding: 0.875rem 1rem;
    border: 2px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    background: rgba(255, 255, 255, 0.05);
    color: var(--text-color);
    font-size: 1rem;
    transition: all 0.3s ease;
  }

  .form-group input:focus {
    outline: none;
    border-color: var(--purple-primary);
    background: rgba(255, 255, 255, 0.1);
    box-shadow: 0 0 0 3px rgba(79, 59, 196, 0.1);
  }

  .form-group input::placeholder {
    color: rgba(255, 255, 255, 0.5);
  }

  .login-btn {
    background: linear-gradient(135deg, var(--purple-primary), var(--purple-secondary));
    color: white;
    border: none;
    padding: 1rem 2rem;
    border-radius: 12px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .login-btn:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(79, 59, 196, 0.3);
  }

  .login-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }

  .btn-loading {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  .btn-loading::before {
    content: '';
    width: 16px;
    height: 16px;
    border: 2px solid transparent;
    border-top: 2px solid currentColor;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  .error-message {
    background: rgba(231, 76, 60, 0.1);
    border: 1px solid rgba(231, 76, 60, 0.3);
    color: #ff6b6b;
    padding: 0.875rem;
    border-radius: 8px;
    font-size: 0.9rem;
    text-align: center;
  }

  .success-message {
    background: rgba(39, 174, 96, 0.1);
    border: 1px solid rgba(39, 174, 96, 0.3);
    color: #51cf66;
    padding: 0.875rem;
    border-radius: 8px;
    font-size: 0.9rem;
    text-align: center;
  }

  .hidden {
    display: none;
  }

  .help-text {
    margin-top: 2rem;
    padding-top: 1.5rem;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
  }

  .help-text p {
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.9rem;
    margin: 0;
  }

  .help-text a {
    color: var(--purple-primary);
    text-decoration: none;
    font-weight: 500;
  }

  .help-text a:hover {
    text-decoration: underline;
  }

  @media (max-width: 480px) {
    .login-card {
      padding: 2rem 1.5rem;
      margin: 1rem;
    }

    h1 {
      font-size: 2rem;
    }
  }
</style>

<script>
  interface UserData {
    id: string;
    username: string;
    plan: string;
    status: string;
  }

  document.addEventListener('astro:page-load', () => {
    const form = document.getElementById('login-form') as HTMLFormElement;
    const loginBtn = document.getElementById('login-btn') as HTMLButtonElement;
    const btnText = document.querySelector('.btn-text') as HTMLElement;
    const btnLoading = document.querySelector('.btn-loading') as HTMLElement;
    const errorMessage = document.getElementById('error-message') as HTMLElement;
    const successMessage = document.getElementById('success-message') as HTMLElement;
    const useridInput = document.getElementById('userid') as HTMLInputElement;
    const usernameInput = document.getElementById('username') as HTMLInputElement;

    // Check if user is already logged in
    const storedUser = localStorage.getItem('medoracle_user');
    if (storedUser) {
      try {
        const userData = JSON.parse(storedUser);
        showSuccess(`Welcome back, ${userData.username}! Redirecting...`);
        setTimeout(() => {
          window.location.href = '/';
        }, 1500);
        return;
      } catch (error) {
        localStorage.removeItem('medoracle_user');
      }
    }

    function showError(message: string) {
      errorMessage.textContent = message;
      errorMessage.classList.remove('hidden');
      successMessage.classList.add('hidden');
    }

    function showSuccess(message: string) {
      successMessage.textContent = message;
      successMessage.classList.remove('hidden');
      errorMessage.classList.add('hidden');
    }

    function hideMessages() {
      errorMessage.classList.add('hidden');
      successMessage.classList.add('hidden');
    }

    function setLoading(loading: boolean) {
      loginBtn.disabled = loading;
      if (loading) {
        btnText.classList.add('hidden');
        btnLoading.classList.remove('hidden');
      } else {
        btnText.classList.remove('hidden');
        btnLoading.classList.add('hidden');
      }
    }

    async function loginUser(userid: string, username: string): Promise<UserData | null> {
      try {
        const response = await fetch(`http://localhost:8000/cuser/${userid}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          }
        });

        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const userData: UserData = await response.json();
        
        // Verify username matches
        if (userData.username.toLowerCase() !== username.toLowerCase()) {
          throw new Error('Username does not match the provided User ID');
        }

        return userData;
      } catch (error) {
        console.error('Login error:', error);
        throw error;
      }
    }

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      hideMessages();

      const userid = useridInput.value.trim();
      const username = usernameInput.value.trim();

      if (!userid || !username) {
        showError('Please fill in all fields');
        return;
      }

      setLoading(true);

      try {
        const userData = await loginUser(userid, username);
        
        if (userData) {
          // Store user data in localStorage
          localStorage.setItem('medoracle_user', JSON.stringify(userData));
          
          showSuccess(`Welcome, ${userData.username}! Login successful. Redirecting...`);
          
          // Redirect to home page after 2 seconds
          setTimeout(() => {
            window.location.href = '/';
          }, 2000);
        }
      } catch (error) {
        if (error instanceof Error) {
          showError(error.message);
        } else {
          showError('Login failed. Please check your credentials and try again.');
        }
      } finally {
        setLoading(false);
      }
    });

    // Clear error messages when user starts typing
    [useridInput, usernameInput].forEach(input => {
      input.addEventListener('input', hideMessages);
    });
  });
</script>
